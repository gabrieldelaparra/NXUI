// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Expander"/> class style setters extension methods.
/// </summary>
public static partial class ExpanderSetters
{
    // Avalonia.Controls.Expander.ContentTransitionProperty

    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.ContentTransitionProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="value">The property value.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderContentTransition(this Style style, Avalonia.Animation.IPageTransition value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, value));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.ContentTransitionProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="value">The property value.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderContentTransition(this KeyFrame keyFrame, Avalonia.Animation.IPageTransition value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, value));
        return keyFrame;
    }
    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.ContentTransitionProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="observable">The property observable.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderContentTransition(this Style style, IObservable<Avalonia.Animation.IPageTransition> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, observable.ToBinding()));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.ContentTransitionProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="observable">The property binding.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderContentTransition(this KeyFrame keyFrame, IObservable<Avalonia.Animation.IPageTransition> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, observable.ToBinding()));
        return keyFrame;
    }
    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.ContentTransitionProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="binding">The property binding.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderContentTransition(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, binding));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.ContentTransitionProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="binding">The property binding.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderContentTransition(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, binding));
        return keyFrame;
    }

    // Avalonia.Controls.Expander.ExpandDirectionProperty

    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.ExpandDirectionProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="value">The property value.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderExpandDirection(this Style style, Avalonia.Controls.ExpandDirection value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, value));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.ExpandDirectionProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="value">The property value.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderExpandDirection(this KeyFrame keyFrame, Avalonia.Controls.ExpandDirection value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, value));
        return keyFrame;
    }
    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.ExpandDirectionProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="observable">The property observable.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderExpandDirection(this Style style, IObservable<Avalonia.Controls.ExpandDirection> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, observable.ToBinding()));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.ExpandDirectionProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="observable">The property binding.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderExpandDirection(this KeyFrame keyFrame, IObservable<Avalonia.Controls.ExpandDirection> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, observable.ToBinding()));
        return keyFrame;
    }
    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.ExpandDirectionProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="binding">The property binding.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderExpandDirection(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, binding));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.ExpandDirectionProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="binding">The property binding.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderExpandDirection(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, binding));
        return keyFrame;
    }

    // Avalonia.Controls.Expander.IsExpandedProperty

    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.IsExpandedProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="value">The property value.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderIsExpanded(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, value));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.IsExpandedProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="value">The property value.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderIsExpanded(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, value));
        return keyFrame;
    }
    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.IsExpandedProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="observable">The property observable.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderIsExpanded(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, observable.ToBinding()));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.IsExpandedProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="observable">The property binding.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderIsExpanded(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, observable.ToBinding()));
        return keyFrame;
    }
    /// <summary>
    /// Adds a style setter for an <see cref="Avalonia.Controls.Expander.IsExpandedProperty"/>.
    /// </summary>
    /// <param name="style">The target style.</param>
    /// <param name="binding">The property binding.</param>
    /// <returns>The target style object reference.</returns>
    public static Style SetExpanderIsExpanded(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, binding));
        return style;
    }

    /// <summary>
    /// Adds a keyframe setter for an <see cref="Avalonia.Controls.Expander.IsExpandedProperty"/>.
    /// </summary>
    /// <param name="keyFrame">The target keyframe.</param>
    /// <param name="binding">The property binding.</param>
    /// <returns>The target keyframe object reference.</returns>
    public static KeyFrame SetExpanderIsExpanded(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, binding));
        return keyFrame;
    }

}
