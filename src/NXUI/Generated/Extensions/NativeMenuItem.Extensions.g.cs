// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.NativeMenuItem"/> class property extension methods.
/// </summary>
public static partial class NativeMenuItemExtensions
{
    // Avalonia.Controls.NativeMenuItem.MenuProperty

    public static Builder<T> Menu1<T>(this Builder<T> builder, Builder<Avalonia.Controls.NativeMenu> value)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.MenuProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.MenuProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Menu<T>(this T obj, Avalonia.Controls.NativeMenu value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.MenuProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.MenuProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Menu<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.MenuProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.MenuProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Menu<T>(
        this T obj,
        IObservable<Avalonia.Controls.NativeMenu> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.MenuProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.NativeMenuItem.MenuProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.NativeMenuItem.MenuProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMenu(
        this Avalonia.Controls.NativeMenuItem obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.MenuProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.NativeMenuItem.MenuProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.NativeMenu> ObserveMenu(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.MenuProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.NativeMenuItem.MenuProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMenu<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<Avalonia.Controls.NativeMenu>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.MenuProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.NativeMenuItem.IconProperty

    public static Builder<T> Icon1<T>(this Builder<T> builder, Builder<Avalonia.Media.Imaging.IBitmap> value)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.IconProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.IconProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Icon<T>(this T obj, Avalonia.Media.Imaging.IBitmap value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IconProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.IconProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Icon<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IconProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.IconProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Icon<T>(
        this T obj,
        IObservable<Avalonia.Media.Imaging.IBitmap> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IconProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.NativeMenuItem.IconProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.NativeMenuItem.IconProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIcon(
        this Avalonia.Controls.NativeMenuItem obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IconProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.NativeMenuItem.IconProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Imaging.IBitmap> ObserveIcon(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.IconProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.NativeMenuItem.IconProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIcon<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<Avalonia.Media.Imaging.IBitmap>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.IconProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.NativeMenuItem.HeaderProperty

    public static Builder<T> Header1<T>(this Builder<T> builder, Builder<System.String> value)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.HeaderProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.HeaderProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Header<T>(this T obj, System.String value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.HeaderProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.HeaderProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Header<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.HeaderProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.HeaderProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Header<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.HeaderProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.NativeMenuItem.HeaderProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.NativeMenuItem.HeaderProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHeader(
        this Avalonia.Controls.NativeMenuItem obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.HeaderProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.NativeMenuItem.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveHeader(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.HeaderProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.NativeMenuItem.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHeader<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<System.String>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.HeaderProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.NativeMenuItem.GestureProperty

    public static Builder<T> Gesture1<T>(this Builder<T> builder, Builder<Avalonia.Input.KeyGesture> value)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.GestureProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.GestureProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Gesture<T>(this T obj, Avalonia.Input.KeyGesture value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.GestureProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.GestureProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Gesture<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.GestureProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.GestureProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Gesture<T>(
        this T obj,
        IObservable<Avalonia.Input.KeyGesture> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.GestureProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.NativeMenuItem.GestureProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.NativeMenuItem.GestureProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindGesture(
        this Avalonia.Controls.NativeMenuItem obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.GestureProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.NativeMenuItem.GestureProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Input.KeyGesture> ObserveGesture(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.GestureProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.NativeMenuItem.GestureProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnGesture<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<Avalonia.Input.KeyGesture>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.GestureProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.NativeMenuItem.IsCheckedProperty

    public static Builder<T> IsChecked1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.IsCheckedProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsChecked<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.IsCheckedProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsChecked<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IsCheckedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.IsCheckedProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsChecked<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IsCheckedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.NativeMenuItem.IsCheckedProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.NativeMenuItem.IsCheckedProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsChecked(
        this Avalonia.Controls.NativeMenuItem obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IsCheckedProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.NativeMenuItem.IsCheckedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsChecked(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.IsCheckedProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.NativeMenuItem.IsCheckedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsChecked<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.IsCheckedProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.NativeMenuItem.ToggleTypeProperty

    public static Builder<T> ToggleType1<T>(this Builder<T> builder, Builder<Avalonia.Controls.NativeMenuItemToggleType> value)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ToggleType<T>(this T obj, Avalonia.Controls.NativeMenuItemToggleType value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ToggleType<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.ToggleTypeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ToggleType<T>(
        this T obj,
        IObservable<Avalonia.Controls.NativeMenuItemToggleType> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.ToggleTypeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindToggleType(
        this Avalonia.Controls.NativeMenuItem obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.ToggleTypeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.NativeMenuItemToggleType> ObserveToggleType(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnToggleType<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<Avalonia.Controls.NativeMenuItemToggleType>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> ToggleTypeNone1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.None;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/> property value to <see cref="Avalonia.Controls.NativeMenuItemToggleType.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ToggleTypeNone<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.None;
        return obj;
    }

    public static Builder<T> ToggleTypeCheckBox1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.CheckBox;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/> property value to <see cref="Avalonia.Controls.NativeMenuItemToggleType.CheckBox"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ToggleTypeCheckBox<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.CheckBox;
        return obj;
    }

    public static Builder<T> ToggleTypeRadio1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.Radio;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.ToggleTypeProperty"/> property value to <see cref="Avalonia.Controls.NativeMenuItemToggleType.Radio"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ToggleTypeRadio<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.Radio;
        return obj;
    }

    // Avalonia.Controls.NativeMenuItem.CommandProperty

    public static Builder<T> Command1<T>(this Builder<T> builder, Builder<System.Windows.Input.ICommand> value)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.CommandProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.CommandProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Command<T>(this T obj, System.Windows.Input.ICommand value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.CommandProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.CommandProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Command<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.CommandProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.CommandProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Command<T>(
        this T obj,
        IObservable<System.Windows.Input.ICommand> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.CommandProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.NativeMenuItem.CommandProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.NativeMenuItem.CommandProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCommand(
        this Avalonia.Controls.NativeMenuItem obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.CommandProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.NativeMenuItem.CommandProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Windows.Input.ICommand> ObserveCommand(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.CommandProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.NativeMenuItem.CommandProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCommand<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<System.Windows.Input.ICommand>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.CommandProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.NativeMenuItem.IsEnabledProperty

    public static Builder<T> IsEnabled1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.NativeMenuItem
    {
        void Setter(T obj) => obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.NativeMenuItem.IsEnabledProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.IsEnabledProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsEnabled<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IsEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.NativeMenuItem.IsEnabledProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsEnabled<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.NativeMenuItem
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IsEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.NativeMenuItem.IsEnabledProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.NativeMenuItem.IsEnabledProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsEnabled(
        this Avalonia.Controls.NativeMenuItem obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.NativeMenuItem.IsEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.NativeMenuItem.IsEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsEnabled(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.IsEnabledProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.NativeMenuItem.IsEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsEnabled<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.IsEnabledProperty);
        handler(obj, observable);
        return obj;
    }
}
