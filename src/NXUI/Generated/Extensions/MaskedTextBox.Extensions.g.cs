// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.MaskedTextBox"/> class property extension methods.
/// </summary>
public static partial class MaskedTextBoxExtensions
{
    // Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty

    public static Builder<T> AsciiOnly1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.MaskedTextBox
    {
        void Setter(T obj) => obj[Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AsciiOnly<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.MaskedTextBox
    {
        obj[Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AsciiOnly<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AsciiOnly<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAsciiOnly(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAsciiOnly(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAsciiOnly<T>(this T obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.MaskedTextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.AsciiOnlyProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.CultureProperty

    public static Builder<T> Culture1<T>(this Builder<T> builder, Builder<System.Globalization.CultureInfo> value)
        where T : Avalonia.Controls.MaskedTextBox
    {
        void Setter(T obj) => obj[Avalonia.Controls.MaskedTextBox.CultureProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.MaskedTextBox.CultureProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Culture<T>(this T obj, System.Globalization.CultureInfo value) where T : Avalonia.Controls.MaskedTextBox
    {
        obj[Avalonia.Controls.MaskedTextBox.CultureProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.CultureProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Culture<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.CultureProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.CultureProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Culture<T>(
        this T obj,
        IObservable<System.Globalization.CultureInfo> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.CultureProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.CultureProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.CultureProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCulture(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.CultureProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.CultureProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Globalization.CultureInfo> ObserveCulture(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.CultureProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.CultureProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCulture<T>(this T obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Globalization.CultureInfo>> handler) where T : Avalonia.Controls.MaskedTextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.CultureProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty

    public static Builder<T> HidePromptOnLeave1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.MaskedTextBox
    {
        void Setter(T obj) => obj[Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HidePromptOnLeave<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.MaskedTextBox
    {
        obj[Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HidePromptOnLeave<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HidePromptOnLeave<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHidePromptOnLeave(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveHidePromptOnLeave(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHidePromptOnLeave<T>(this T obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.MaskedTextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.HidePromptOnLeaveProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.MaskCompletedProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.MaskCompletedProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.MaskCompletedProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaskCompleted(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.MaskCompletedProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.MaskCompletedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.Boolean>> ObserveMaskCompleted(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.MaskCompletedProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.MaskCompletedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.MaskedTextBox OnMaskCompleted(this Avalonia.Controls.MaskedTextBox obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Nullable<System.Boolean>>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.MaskCompletedProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.MaskFullProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.MaskFullProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.MaskFullProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaskFull(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.MaskFullProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.MaskFullProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.Boolean>> ObserveMaskFull(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.MaskFullProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.MaskFullProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.MaskedTextBox OnMaskFull(this Avalonia.Controls.MaskedTextBox obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Nullable<System.Boolean>>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.MaskFullProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.MaskProperty

    public static Builder<T> Mask1<T>(this Builder<T> builder, Builder<System.String> value)
        where T : Avalonia.Controls.MaskedTextBox
    {
        void Setter(T obj) => obj[Avalonia.Controls.MaskedTextBox.MaskProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.MaskedTextBox.MaskProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Mask<T>(this T obj, System.String value) where T : Avalonia.Controls.MaskedTextBox
    {
        obj[Avalonia.Controls.MaskedTextBox.MaskProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.MaskProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Mask<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.MaskProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.MaskProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Mask<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.MaskProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.MaskProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.MaskProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMask(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.MaskProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.MaskProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveMask(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.MaskProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.MaskProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMask<T>(this T obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.String>> handler) where T : Avalonia.Controls.MaskedTextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.MaskProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.PasswordCharProperty

    public static Builder<T> PasswordChar1<T>(this Builder<T> builder, Builder<System.Char> value)
        where T : Avalonia.Controls.MaskedTextBox
    {
        void Setter(T obj) => obj[Avalonia.Controls.MaskedTextBox.PasswordCharProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.MaskedTextBox.PasswordCharProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PasswordChar<T>(this T obj, System.Char value) where T : Avalonia.Controls.MaskedTextBox
    {
        obj[Avalonia.Controls.MaskedTextBox.PasswordCharProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.PasswordCharProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PasswordChar<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.PasswordCharProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.PasswordCharProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PasswordChar<T>(
        this T obj,
        IObservable<System.Char> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.PasswordCharProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.PasswordCharProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.PasswordCharProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPasswordChar(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.PasswordCharProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.PasswordCharProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Char> ObservePasswordChar(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.PasswordCharProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.PasswordCharProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPasswordChar<T>(this T obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Char>> handler) where T : Avalonia.Controls.MaskedTextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.PasswordCharProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.PromptCharProperty

    public static Builder<T> PromptChar1<T>(this Builder<T> builder, Builder<System.Char> value)
        where T : Avalonia.Controls.MaskedTextBox
    {
        void Setter(T obj) => obj[Avalonia.Controls.MaskedTextBox.PromptCharProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.MaskedTextBox.PromptCharProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PromptChar<T>(this T obj, System.Char value) where T : Avalonia.Controls.MaskedTextBox
    {
        obj[Avalonia.Controls.MaskedTextBox.PromptCharProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.PromptCharProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PromptChar<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.PromptCharProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.PromptCharProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PromptChar<T>(
        this T obj,
        IObservable<System.Char> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.PromptCharProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.PromptCharProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.PromptCharProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPromptChar(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.PromptCharProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.PromptCharProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Char> ObservePromptChar(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.PromptCharProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.PromptCharProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPromptChar<T>(this T obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Char>> handler) where T : Avalonia.Controls.MaskedTextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.PromptCharProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty

    public static Builder<T> ResetOnPrompt1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.MaskedTextBox
    {
        void Setter(T obj) => obj[Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ResetOnPrompt<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.MaskedTextBox
    {
        obj[Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ResetOnPrompt<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ResetOnPrompt<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindResetOnPrompt(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveResetOnPrompt(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnResetOnPrompt<T>(this T obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.MaskedTextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.ResetOnPromptProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty

    public static Builder<T> ResetOnSpace1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.MaskedTextBox
    {
        void Setter(T obj) => obj[Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ResetOnSpace<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.MaskedTextBox
    {
        obj[Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ResetOnSpace<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ResetOnSpace<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.MaskedTextBox
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindResetOnSpace(
        this Avalonia.Controls.MaskedTextBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveResetOnSpace(this Avalonia.Controls.MaskedTextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnResetOnSpace<T>(this T obj, Action<Avalonia.Controls.MaskedTextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.MaskedTextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.MaskedTextBox.ResetOnSpaceProperty);
        handler(obj, observable);
        return obj;
    }
}
