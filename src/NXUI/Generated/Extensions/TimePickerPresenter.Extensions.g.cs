// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.TimePickerPresenter"/> class property extension methods.
/// </summary>
public static partial class TimePickerPresenterExtensions
{
    // Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty

    public static Builder<T> MinuteIncrement1<T>(this Builder<T> builder, Builder<System.Int32> value)
        where T : Avalonia.Controls.TimePickerPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinuteIncrement<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TimePickerPresenter
    {
        obj[Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinuteIncrement<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TimePickerPresenter
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinuteIncrement<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TimePickerPresenter
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinuteIncrement(
        this Avalonia.Controls.TimePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMinuteIncrement(this Avalonia.Controls.TimePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinuteIncrement<T>(this T obj, Action<Avalonia.Controls.TimePickerPresenter, IObservable<System.Int32>> handler) where T : Avalonia.Controls.TimePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty

    public static Builder<T> ClockIdentifier1<T>(this Builder<T> builder, Builder<System.String> value)
        where T : Avalonia.Controls.TimePickerPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClockIdentifier<T>(this T obj, System.String value) where T : Avalonia.Controls.TimePickerPresenter
    {
        obj[Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClockIdentifier<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TimePickerPresenter
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClockIdentifier<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TimePickerPresenter
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindClockIdentifier(
        this Avalonia.Controls.TimePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveClockIdentifier(this Avalonia.Controls.TimePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnClockIdentifier<T>(this T obj, Action<Avalonia.Controls.TimePickerPresenter, IObservable<System.String>> handler) where T : Avalonia.Controls.TimePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TimePickerPresenter.TimeProperty

    public static Builder<T> Time1<T>(this Builder<T> builder, Builder<System.TimeSpan> value)
        where T : Avalonia.Controls.TimePickerPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.TimePickerPresenter.TimeProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TimePickerPresenter.TimeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Time<T>(this T obj, System.TimeSpan value) where T : Avalonia.Controls.TimePickerPresenter
    {
        obj[Avalonia.Controls.TimePickerPresenter.TimeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TimePickerPresenter.TimeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Time<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TimePickerPresenter
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.TimeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TimePickerPresenter.TimeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Time<T>(
        this T obj,
        IObservable<System.TimeSpan> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TimePickerPresenter
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.TimeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TimePickerPresenter.TimeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TimePickerPresenter.TimeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTime(
        this Avalonia.Controls.TimePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TimePickerPresenter.TimeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TimePickerPresenter.TimeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.TimeSpan> ObserveTime(this Avalonia.Controls.TimePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.TimePickerPresenter.TimeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TimePickerPresenter.TimeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTime<T>(this T obj, Action<Avalonia.Controls.TimePickerPresenter, IObservable<System.TimeSpan>> handler) where T : Avalonia.Controls.TimePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.TimePickerPresenter.TimeProperty);
        handler(obj, observable);
        return obj;
    }
}
