// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.GlyphRunDrawing"/> class property extension methods.
/// </summary>
public static partial class GlyphRunDrawingExtensions
{
    // Avalonia.Media.GlyphRunDrawing.ForegroundProperty

    public static Builder<T> Foreground1<T>(this Builder<T> builder, Builder<Avalonia.Media.IBrush> value)
        where T : Avalonia.Media.GlyphRunDrawing
    {
        void Setter(T obj) => obj[Avalonia.Media.GlyphRunDrawing.ForegroundProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.GlyphRunDrawing.ForegroundProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Foreground<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Media.GlyphRunDrawing
    {
        obj[Avalonia.Media.GlyphRunDrawing.ForegroundProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.GlyphRunDrawing.ForegroundProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Foreground<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.GlyphRunDrawing
    {
        var descriptor = Avalonia.Media.GlyphRunDrawing.ForegroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.GlyphRunDrawing.ForegroundProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Foreground<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.GlyphRunDrawing
    {
        var descriptor = Avalonia.Media.GlyphRunDrawing.ForegroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.GlyphRunDrawing.ForegroundProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.GlyphRunDrawing.ForegroundProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindForeground(
        this Avalonia.Media.GlyphRunDrawing obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.GlyphRunDrawing.ForegroundProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.GlyphRunDrawing.ForegroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveForeground(this Avalonia.Media.GlyphRunDrawing obj)
    {
        return obj.GetObservable(Avalonia.Media.GlyphRunDrawing.ForegroundProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.GlyphRunDrawing.ForegroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnForeground<T>(this T obj, Action<Avalonia.Media.GlyphRunDrawing, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Media.GlyphRunDrawing
    {
        var observable = obj.GetObservable(Avalonia.Media.GlyphRunDrawing.ForegroundProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.GlyphRunDrawing.GlyphRunProperty

    public static Builder<T> GlyphRun1<T>(this Builder<T> builder, Builder<Avalonia.Media.GlyphRun> value)
        where T : Avalonia.Media.GlyphRunDrawing
    {
        void Setter(T obj) => obj[Avalonia.Media.GlyphRunDrawing.GlyphRunProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.GlyphRunDrawing.GlyphRunProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GlyphRun<T>(this T obj, Avalonia.Media.GlyphRun value) where T : Avalonia.Media.GlyphRunDrawing
    {
        obj[Avalonia.Media.GlyphRunDrawing.GlyphRunProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.GlyphRunDrawing.GlyphRunProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GlyphRun<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.GlyphRunDrawing
    {
        var descriptor = Avalonia.Media.GlyphRunDrawing.GlyphRunProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.GlyphRunDrawing.GlyphRunProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GlyphRun<T>(
        this T obj,
        IObservable<Avalonia.Media.GlyphRun> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.GlyphRunDrawing
    {
        var descriptor = Avalonia.Media.GlyphRunDrawing.GlyphRunProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.GlyphRunDrawing.GlyphRunProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.GlyphRunDrawing.GlyphRunProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindGlyphRun(
        this Avalonia.Media.GlyphRunDrawing obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.GlyphRunDrawing.GlyphRunProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.GlyphRunDrawing.GlyphRunProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.GlyphRun> ObserveGlyphRun(this Avalonia.Media.GlyphRunDrawing obj)
    {
        return obj.GetObservable(Avalonia.Media.GlyphRunDrawing.GlyphRunProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.GlyphRunDrawing.GlyphRunProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnGlyphRun<T>(this T obj, Action<Avalonia.Media.GlyphRunDrawing, IObservable<Avalonia.Media.GlyphRun>> handler) where T : Avalonia.Media.GlyphRunDrawing
    {
        var observable = obj.GetObservable(Avalonia.Media.GlyphRunDrawing.GlyphRunProperty);
        handler(obj, observable);
        return obj;
    }
}
