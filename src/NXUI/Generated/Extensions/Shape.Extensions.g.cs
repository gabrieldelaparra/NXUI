// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Shapes.Shape"/> class property extension methods.
/// </summary>
public static partial class ShapeExtensions
{
    // Avalonia.Controls.Shapes.Shape.FillProperty

    public static Builder<T> Fill1<T>(this Builder<T> builder, Builder<Avalonia.Media.IBrush> value)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.FillProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.FillProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Fill<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.FillProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.FillProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Fill<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.FillProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.FillProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Fill<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.FillProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Shapes.Shape.FillProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Shapes.Shape.FillProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFill(
        this Avalonia.Controls.Shapes.Shape obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.FillProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Shapes.Shape.FillProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveFill(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.FillProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Shapes.Shape.FillProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFill<T>(this T obj, Action<Avalonia.Controls.Shapes.Shape, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.FillProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Shapes.Shape.StretchProperty

    public static Builder<T> Stretch1<T>(this Builder<T> builder, Builder<Avalonia.Media.Stretch> value)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(this T obj, Avalonia.Media.Stretch value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(
        this T obj,
        IObservable<Avalonia.Media.Stretch> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStretch(
        this Avalonia.Controls.Shapes.Shape obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Stretch> ObserveStretch(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StretchProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStretch<T>(this T obj, Action<Avalonia.Controls.Shapes.Shape, IObservable<Avalonia.Media.Stretch>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StretchProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> StretchNone1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.None;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchNone<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.None;
        return obj;
    }

    public static Builder<T> StretchFill1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.Fill;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.Fill"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchFill<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.Fill;
        return obj;
    }

    public static Builder<T> StretchUniform1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.Uniform;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.Uniform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchUniform<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.Uniform;
        return obj;
    }

    public static Builder<T> StretchUniformToFill1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.UniformToFill;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.UniformToFill"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchUniformToFill<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.UniformToFill;
        return obj;
    }

    // Avalonia.Controls.Shapes.Shape.StrokeProperty

    public static Builder<T> Stroke1<T>(this Builder<T> builder, Builder<Avalonia.Media.IBrush> value)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stroke<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stroke<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stroke<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Shapes.Shape.StrokeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Shapes.Shape.StrokeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStroke(
        this Avalonia.Controls.Shapes.Shape obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveStroke(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStroke<T>(this T obj, Action<Avalonia.Controls.Shapes.Shape, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty

    public static Builder<T> StrokeDashArray1<T>(this Builder<T> builder, Builder<Avalonia.Collections.AvaloniaList<System.Double>> value)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashArray<T>(this T obj, Avalonia.Collections.AvaloniaList<System.Double> value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashArray<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashArray<T>(
        this T obj,
        IObservable<Avalonia.Collections.AvaloniaList<System.Double>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeDashArray(
        this Avalonia.Controls.Shapes.Shape obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Collections.AvaloniaList<System.Double>> ObserveStrokeDashArray(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeDashArray<T>(this T obj, Action<Avalonia.Controls.Shapes.Shape, IObservable<Avalonia.Collections.AvaloniaList<System.Double>>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty

    public static Builder<T> StrokeDashOffset1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashOffset<T>(this T obj, System.Double value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashOffset<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashOffset<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeDashOffset(
        this Avalonia.Controls.Shapes.Shape obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveStrokeDashOffset(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeDashOffset<T>(this T obj, Action<Avalonia.Controls.Shapes.Shape, IObservable<System.Double>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty

    public static Builder<T> StrokeThickness1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThickness<T>(this T obj, System.Double value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThickness<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThickness<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeThickness(
        this Avalonia.Controls.Shapes.Shape obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveStrokeThickness(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeThickness<T>(this T obj, Action<Avalonia.Controls.Shapes.Shape, IObservable<System.Double>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty

    public static Builder<T> StrokeLineCap1<T>(this Builder<T> builder, Builder<Avalonia.Media.PenLineCap> value)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCap<T>(this T obj, Avalonia.Media.PenLineCap value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCap<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCap<T>(
        this T obj,
        IObservable<Avalonia.Media.PenLineCap> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeLineCap(
        this Avalonia.Controls.Shapes.Shape obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.PenLineCap> ObserveStrokeLineCap(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeLineCap<T>(this T obj, Action<Avalonia.Controls.Shapes.Shape, IObservable<Avalonia.Media.PenLineCap>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> StrokeLineCapFlat1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Flat;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Flat"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCapFlat<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Flat;
        return obj;
    }

    public static Builder<T> StrokeLineCapRound1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Round;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Round"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCapRound<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Round;
        return obj;
    }

    public static Builder<T> StrokeLineCapSquare1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Square;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Square"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCapSquare<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Square;
        return obj;
    }

    // Avalonia.Controls.Shapes.Shape.StrokeJoinProperty

    public static Builder<T> StrokeJoin1<T>(this Builder<T> builder, Builder<Avalonia.Media.PenLineJoin> value)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeJoin<T>(this T obj, Avalonia.Media.PenLineJoin value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeJoin<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeJoinProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeJoin<T>(
        this T obj,
        IObservable<Avalonia.Media.PenLineJoin> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Shapes.Shape
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeJoinProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeJoin(
        this Avalonia.Controls.Shapes.Shape obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Shapes.Shape.StrokeJoinProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.PenLineJoin> ObserveStrokeJoin(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeJoinProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeJoin<T>(this T obj, Action<Avalonia.Controls.Shapes.Shape, IObservable<Avalonia.Media.PenLineJoin>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeJoinProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> StrokeJoinBevel1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Bevel;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/> property value to <see cref="Avalonia.Media.PenLineJoin.Bevel"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeJoinBevel<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Bevel;
        return obj;
    }

    public static Builder<T> StrokeJoinMiter1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Miter;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/> property value to <see cref="Avalonia.Media.PenLineJoin.Miter"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeJoinMiter<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Miter;
        return obj;
    }

    public static Builder<T> StrokeJoinRound1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Shapes.Shape
    {
        void Setter(T obj) => obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Round;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Shapes.Shape.StrokeJoinProperty"/> property value to <see cref="Avalonia.Media.PenLineJoin.Round"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeJoinRound<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Round;
        return obj;
    }
}
