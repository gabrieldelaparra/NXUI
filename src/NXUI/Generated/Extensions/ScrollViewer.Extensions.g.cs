// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.ScrollViewer"/> class property extension methods.
/// </summary>
public static partial class ScrollViewerExtensions
{
    // Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanHorizontallyScroll(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanHorizontallyScroll(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnCanHorizontallyScroll(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanVerticallyScroll(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanVerticallyScroll(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnCanVerticallyScroll(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.ExtentProperty

    public static Builder<T> Extent1<T>(this Builder<T> builder, Builder<Avalonia.Size> value)
        where T : Avalonia.Controls.ScrollViewer
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.ExtentProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.ExtentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Extent<T>(this T obj, Avalonia.Size value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.ExtentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.ExtentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Extent<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.ExtentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.ExtentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Extent<T>(
        this T obj,
        IObservable<Avalonia.Size> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.ExtentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.ExtentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.ExtentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindExtent(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.ExtentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.ExtentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Size> ObserveExtent(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.ExtentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.ExtentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnExtent<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Size>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.ExtentProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.OffsetProperty

    public static Builder<T> Offset1<T>(this Builder<T> builder, Builder<Avalonia.Vector> value)
        where T : Avalonia.Controls.ScrollViewer
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.OffsetProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.OffsetProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Offset<T>(this T obj, Avalonia.Vector value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.OffsetProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.OffsetProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Offset<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.OffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.OffsetProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Offset<T>(
        this T obj,
        IObservable<Avalonia.Vector> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.OffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.OffsetProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.OffsetProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOffset(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.OffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.OffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Vector> ObserveOffset(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.OffsetProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.OffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOffset<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Vector>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.OffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.ViewportProperty

    public static Builder<T> Viewport1<T>(this Builder<T> builder, Builder<Avalonia.Size> value)
        where T : Avalonia.Controls.ScrollViewer
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.ViewportProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.ViewportProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Viewport<T>(this T obj, Avalonia.Size value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.ViewportProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.ViewportProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Viewport<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.ViewportProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.ViewportProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Viewport<T>(
        this T obj,
        IObservable<Avalonia.Size> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.ViewportProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.ViewportProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.ViewportProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindViewport(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.ViewportProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.ViewportProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Size> ObserveViewport(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.ViewportProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.ViewportProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnViewport<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Size>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.ViewportProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.LargeChangeProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.LargeChangeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.LargeChangeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindLargeChange(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.LargeChangeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.LargeChangeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Size> ObserveLargeChange(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.LargeChangeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.LargeChangeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnLargeChange(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Size>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.LargeChangeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.SmallChangeProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.SmallChangeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.SmallChangeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSmallChange(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.SmallChangeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.SmallChangeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Size> ObserveSmallChange(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.SmallChangeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.SmallChangeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnSmallChange(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Size>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.SmallChangeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalScrollBarMaximum(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveHorizontalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnHorizontalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty

    public static Builder<T> HorizontalScrollBarValue1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Controls.ScrollViewer
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarValue<T>(this T obj, System.Double value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarValue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarValue<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalScrollBarValue(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveHorizontalScrollBarValue(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalScrollBarValue<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalScrollBarViewportSize(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveHorizontalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnHorizontalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty

    public static Builder<T> HorizontalScrollBarVisibility1<T>(this Builder<T> builder, Builder<Avalonia.Controls.Primitives.ScrollBarVisibility> value)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibility<T>(this T obj, Avalonia.Controls.Primitives.ScrollBarVisibility value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibility<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Control
    {
        var descriptor = Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibility<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Control
    {
        var descriptor = Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalScrollBarVisibility(
        this Avalonia.Controls.Control obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> ObserveHorizontalScrollBarVisibility(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalScrollBarVisibility<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> HorizontalScrollBarVisibilityDisabled1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibilityDisabled<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        return obj;
    }

    public static Builder<T> HorizontalScrollBarVisibilityAuto1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Auto"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibilityAuto<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        return obj;
    }

    public static Builder<T> HorizontalScrollBarVisibilityHidden1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibilityHidden<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        return obj;
    }

    public static Builder<T> HorizontalScrollBarVisibilityVisible1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Visible"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibilityVisible<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalScrollBarMaximum(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveVerticalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnVerticalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty

    public static Builder<T> VerticalScrollBarValue1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Controls.ScrollViewer
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarValue<T>(this T obj, System.Double value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarValue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarValue<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ScrollViewer
    {
        var descriptor = Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalScrollBarValue(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveVerticalScrollBarValue(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalScrollBarValue<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalScrollBarViewportSize(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveVerticalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnVerticalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty

    public static Builder<T> VerticalScrollBarVisibility1<T>(this Builder<T> builder, Builder<Avalonia.Controls.Primitives.ScrollBarVisibility> value)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibility<T>(this T obj, Avalonia.Controls.Primitives.ScrollBarVisibility value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibility<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Control
    {
        var descriptor = Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibility<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Control
    {
        var descriptor = Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalScrollBarVisibility(
        this Avalonia.Controls.Control obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> ObserveVerticalScrollBarVisibility(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalScrollBarVisibility<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> VerticalScrollBarVisibilityDisabled1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibilityDisabled<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        return obj;
    }

    public static Builder<T> VerticalScrollBarVisibilityAuto1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Auto"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibilityAuto<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        return obj;
    }

    public static Builder<T> VerticalScrollBarVisibilityHidden1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibilityHidden<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        return obj;
    }

    public static Builder<T> VerticalScrollBarVisibilityVisible1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Visible"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibilityVisible<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.IsExpandedProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.IsExpandedProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.IsExpandedProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsExpanded(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.IsExpandedProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.IsExpandedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsExpanded(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.IsExpandedProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.IsExpandedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.ScrollViewer OnIsExpanded(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.IsExpandedProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.AllowAutoHideProperty

    public static Builder<T> AllowAutoHide1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.AllowAutoHideProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.AllowAutoHideProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AllowAutoHide<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.AllowAutoHideProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.AllowAutoHideProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AllowAutoHide<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Control
    {
        var descriptor = Avalonia.Controls.ScrollViewer.AllowAutoHideProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.AllowAutoHideProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AllowAutoHide<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Control
    {
        var descriptor = Avalonia.Controls.ScrollViewer.AllowAutoHideProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.AllowAutoHideProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.AllowAutoHideProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAllowAutoHide(
        this Avalonia.Controls.Control obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.AllowAutoHideProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.AllowAutoHideProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAllowAutoHide(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.AllowAutoHideProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.AllowAutoHideProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAllowAutoHide<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.AllowAutoHideProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty

    public static Builder<T> IsScrollChainingEnabled1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.Control
    {
        void Setter(T obj) => obj[Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsScrollChainingEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsScrollChainingEnabled<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Control
    {
        var descriptor = Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsScrollChainingEnabled<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Control
    {
        var descriptor = Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsScrollChainingEnabled(
        this Avalonia.Controls.Control obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsScrollChainingEnabled(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsScrollChainingEnabled<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ScrollViewer.ScrollChangedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.ScrollViewer.ScrollChangedEvent"/> event on an object of type <see cref="Avalonia.Controls.ScrollViewer"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnScrollChangedHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.ScrollChangedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.ScrollViewer
    {
        obj.AddHandler(Avalonia.Controls.ScrollViewer.ScrollChangedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.ScrollViewer.ScrollChangedEvent"/> event on an object of type <see cref="Avalonia.Controls.ScrollViewer"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnScrollChanged<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.ScrollChangedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.ScrollChangedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.ScrollViewer.ScrollChangedEvent"/> event on an object of type <see cref="Avalonia.Controls.ScrollViewer"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Controls.ScrollChangedEventArgs> ObserveOnScrollChanged(
        this Avalonia.Controls.ScrollViewer obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.ScrollChangedEvent, routes);
    }

    // Avalonia.Controls.ScrollViewer.ScrollChanged

    /// <summary>
    /// Adds a handler to the `ScrollChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnScrollChangedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.ScrollChangedEventArgs>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.ScrollChangedEventArgs>, Avalonia.Controls.ScrollChangedEventArgs>(
                h => obj.ScrollChanged += h, 
                h => obj.ScrollChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `ScrollChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `ScrollChanged` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.ScrollChangedEventArgs> ObserveOnScrollChangedEvent(this Avalonia.Controls.ScrollViewer obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.ScrollChangedEventArgs>, Avalonia.Controls.ScrollChangedEventArgs>(
                h => obj.ScrollChanged += h, 
                h => obj.ScrollChanged -= h)
            .Select(x => x.EventArgs);
    }
}
