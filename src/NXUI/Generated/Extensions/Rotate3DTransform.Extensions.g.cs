// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.Rotate3DTransform"/> class property extension methods.
/// </summary>
public static partial class Rotate3DTransformExtensions
{
    // Avalonia.Media.Rotate3DTransform.AngleXProperty

    public static Builder<T> AngleX1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.Rotate3DTransform
    {
        void Setter(T obj) => obj[Avalonia.Media.Rotate3DTransform.AngleXProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleX<T>(this T obj, System.Double value) where T : Avalonia.Media.Rotate3DTransform
    {
        obj[Avalonia.Media.Rotate3DTransform.AngleXProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleX<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleX<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAngleX(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveAngleX(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleXProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAngleX<T>(this T obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler) where T : Avalonia.Media.Rotate3DTransform
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleXProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.AngleYProperty

    public static Builder<T> AngleY1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.Rotate3DTransform
    {
        void Setter(T obj) => obj[Avalonia.Media.Rotate3DTransform.AngleYProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleY<T>(this T obj, System.Double value) where T : Avalonia.Media.Rotate3DTransform
    {
        obj[Avalonia.Media.Rotate3DTransform.AngleYProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleY<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleY<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAngleY(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveAngleY(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleYProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAngleY<T>(this T obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler) where T : Avalonia.Media.Rotate3DTransform
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleYProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.AngleZProperty

    public static Builder<T> AngleZ1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.Rotate3DTransform
    {
        void Setter(T obj) => obj[Avalonia.Media.Rotate3DTransform.AngleZProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleZ<T>(this T obj, System.Double value) where T : Avalonia.Media.Rotate3DTransform
    {
        obj[Avalonia.Media.Rotate3DTransform.AngleZProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleZ<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleZProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AngleZ<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleZProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAngleZ(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleZProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveAngleZ(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleZProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAngleZ<T>(this T obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler) where T : Avalonia.Media.Rotate3DTransform
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleZProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.CenterXProperty

    public static Builder<T> CenterX1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.Rotate3DTransform
    {
        void Setter(T obj) => obj[Avalonia.Media.Rotate3DTransform.CenterXProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterX<T>(this T obj, System.Double value) where T : Avalonia.Media.Rotate3DTransform
    {
        obj[Avalonia.Media.Rotate3DTransform.CenterXProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterX<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterX<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCenterX(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterXProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveCenterX(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterXProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCenterX<T>(this T obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler) where T : Avalonia.Media.Rotate3DTransform
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterXProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.CenterYProperty

    public static Builder<T> CenterY1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.Rotate3DTransform
    {
        void Setter(T obj) => obj[Avalonia.Media.Rotate3DTransform.CenterYProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterY<T>(this T obj, System.Double value) where T : Avalonia.Media.Rotate3DTransform
    {
        obj[Avalonia.Media.Rotate3DTransform.CenterYProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterY<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterY<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCenterY(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterYProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveCenterY(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterYProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCenterY<T>(this T obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler) where T : Avalonia.Media.Rotate3DTransform
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterYProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.CenterZProperty

    public static Builder<T> CenterZ1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.Rotate3DTransform
    {
        void Setter(T obj) => obj[Avalonia.Media.Rotate3DTransform.CenterZProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterZ<T>(this T obj, System.Double value) where T : Avalonia.Media.Rotate3DTransform
    {
        obj[Avalonia.Media.Rotate3DTransform.CenterZProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterZ<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterZProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CenterZ<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterZProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCenterZ(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterZProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveCenterZ(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterZProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCenterZ<T>(this T obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler) where T : Avalonia.Media.Rotate3DTransform
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterZProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.DepthProperty

    public static Builder<T> Depth1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.Rotate3DTransform
    {
        void Setter(T obj) => obj[Avalonia.Media.Rotate3DTransform.DepthProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Depth<T>(this T obj, System.Double value) where T : Avalonia.Media.Rotate3DTransform
    {
        obj[Avalonia.Media.Rotate3DTransform.DepthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Depth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.DepthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Depth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.Rotate3DTransform
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.DepthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDepth(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.DepthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveDepth(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.DepthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDepth<T>(this T obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler) where T : Avalonia.Media.Rotate3DTransform
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.DepthProperty);
        handler(obj, observable);
        return obj;
    }
}
