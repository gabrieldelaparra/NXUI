// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Presenters.ContentPresenter"/> class property extension methods.
/// </summary>
public static partial class ContentPresenterExtensions
{
    // Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty

    public static Builder<T> Background1<T>(this Builder<T> builder, Builder<Avalonia.Media.IBrush> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Background<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Background<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Background<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBackground(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveBackground(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBackground<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty

    public static Builder<T> BorderBrush1<T>(this Builder<T> builder, Builder<Avalonia.Media.IBrush> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BorderBrush<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BorderBrush<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BorderBrush<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBorderBrush(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveBorderBrush(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBorderBrush<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty

    public static Builder<T> BorderThickness1<T>(this Builder<T> builder, Builder<Avalonia.Thickness> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BorderThickness<T>(this T obj, Avalonia.Thickness value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BorderThickness<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BorderThickness<T>(
        this T obj,
        IObservable<Avalonia.Thickness> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBorderThickness(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Thickness> ObserveBorderThickness(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBorderThickness<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Thickness>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty

    public static Builder<T> CornerRadius1<T>(this Builder<T> builder, Builder<Avalonia.CornerRadius> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CornerRadius<T>(this T obj, Avalonia.CornerRadius value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CornerRadius<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CornerRadius<T>(
        this T obj,
        IObservable<Avalonia.CornerRadius> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCornerRadius(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.CornerRadius> ObserveCornerRadius(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCornerRadius<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.CornerRadius>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty

    public static Builder<T> BoxShadow1<T>(this Builder<T> builder, Builder<Avalonia.Media.BoxShadows> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BoxShadow<T>(this T obj, Avalonia.Media.BoxShadows value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BoxShadow<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BoxShadow<T>(
        this T obj,
        IObservable<Avalonia.Media.BoxShadows> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBoxShadow(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.BoxShadows> ObserveBoxShadow(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBoxShadow<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Media.BoxShadows>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty

    public static Builder<T> Foreground1<T>(this Builder<T> builder, Builder<Avalonia.Media.IBrush> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Foreground<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Foreground<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Foreground<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindForeground(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveForeground(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnForeground<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty

    public static Builder<T> FontFamily1<T>(this Builder<T> builder, Builder<Avalonia.Media.FontFamily> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontFamily<T>(this T obj, Avalonia.Media.FontFamily value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontFamily<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontFamily<T>(
        this T obj,
        IObservable<Avalonia.Media.FontFamily> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFontFamily(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.FontFamily> ObserveFontFamily(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFontFamily<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Media.FontFamily>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty

    public static Builder<T> FontSize1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontSize<T>(this T obj, System.Double value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontSize<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontSize<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFontSize(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveFontSize(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFontSize<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<System.Double>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty

    public static Builder<T> FontStyle1<T>(this Builder<T> builder, Builder<Avalonia.Media.FontStyle> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStyle<T>(this T obj, Avalonia.Media.FontStyle value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStyle<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStyle<T>(
        this T obj,
        IObservable<Avalonia.Media.FontStyle> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFontStyle(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.FontStyle> ObserveFontStyle(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFontStyle<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Media.FontStyle>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> FontStyleNormal1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty] = Avalonia.Media.FontStyle.Normal;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/> property value to <see cref="Avalonia.Media.FontStyle.Normal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStyleNormal<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty] = Avalonia.Media.FontStyle.Normal;
        return obj;
    }

    public static Builder<T> FontStyleItalic1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty] = Avalonia.Media.FontStyle.Italic;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/> property value to <see cref="Avalonia.Media.FontStyle.Italic"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStyleItalic<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty] = Avalonia.Media.FontStyle.Italic;
        return obj;
    }

    public static Builder<T> FontStyleOblique1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty] = Avalonia.Media.FontStyle.Oblique;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty"/> property value to <see cref="Avalonia.Media.FontStyle.Oblique"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStyleOblique<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty] = Avalonia.Media.FontStyle.Oblique;
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty

    public static Builder<T> FontWeight1<T>(this Builder<T> builder, Builder<Avalonia.Media.FontWeight> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeight<T>(this T obj, Avalonia.Media.FontWeight value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeight<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeight<T>(
        this T obj,
        IObservable<Avalonia.Media.FontWeight> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFontWeight(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.FontWeight> ObserveFontWeight(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFontWeight<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Media.FontWeight>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> FontWeightThin1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Thin;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.Thin"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightThin<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Thin;
        return obj;
    }

    public static Builder<T> FontWeightExtraLight1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraLight;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.ExtraLight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightExtraLight<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraLight;
        return obj;
    }

    public static Builder<T> FontWeightUltraLight1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.UltraLight;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.UltraLight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightUltraLight<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.UltraLight;
        return obj;
    }

    public static Builder<T> FontWeightLight1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Light;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.Light"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightLight<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Light;
        return obj;
    }

    public static Builder<T> FontWeightSemiLight1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.SemiLight;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.SemiLight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightSemiLight<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.SemiLight;
        return obj;
    }

    public static Builder<T> FontWeightNormal1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Normal;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.Normal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightNormal<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Normal;
        return obj;
    }

    public static Builder<T> FontWeightRegular1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Regular;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.Regular"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightRegular<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Regular;
        return obj;
    }

    public static Builder<T> FontWeightMedium1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Medium;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.Medium"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightMedium<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Medium;
        return obj;
    }

    public static Builder<T> FontWeightDemiBold1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.DemiBold;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.DemiBold"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightDemiBold<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.DemiBold;
        return obj;
    }

    public static Builder<T> FontWeightSemiBold1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.SemiBold;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.SemiBold"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightSemiBold<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.SemiBold;
        return obj;
    }

    public static Builder<T> FontWeightBold1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Bold;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.Bold"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightBold<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Bold;
        return obj;
    }

    public static Builder<T> FontWeightExtraBold1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraBold;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.ExtraBold"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightExtraBold<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraBold;
        return obj;
    }

    public static Builder<T> FontWeightUltraBold1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.UltraBold;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.UltraBold"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightUltraBold<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.UltraBold;
        return obj;
    }

    public static Builder<T> FontWeightBlack1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Black;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.Black"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightBlack<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Black;
        return obj;
    }

    public static Builder<T> FontWeightHeavy1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Heavy;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.Heavy"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightHeavy<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.Heavy;
        return obj;
    }

    public static Builder<T> FontWeightExtraBlack1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraBlack;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.ExtraBlack"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightExtraBlack<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraBlack;
        return obj;
    }

    public static Builder<T> FontWeightUltraBlack1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.UltraBlack;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty"/> property value to <see cref="Avalonia.Media.FontWeight.UltraBlack"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontWeightUltraBlack<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty] = Avalonia.Media.FontWeight.UltraBlack;
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty

    public static Builder<T> FontStretch1<T>(this Builder<T> builder, Builder<Avalonia.Media.FontStretch> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretch<T>(this T obj, Avalonia.Media.FontStretch value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretch<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretch<T>(
        this T obj,
        IObservable<Avalonia.Media.FontStretch> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFontStretch(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.FontStretch> ObserveFontStretch(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFontStretch<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Media.FontStretch>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> FontStretchUltraCondensed1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.UltraCondensed;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.UltraCondensed"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchUltraCondensed<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.UltraCondensed;
        return obj;
    }

    public static Builder<T> FontStretchExtraCondensed1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.ExtraCondensed;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.ExtraCondensed"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchExtraCondensed<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.ExtraCondensed;
        return obj;
    }

    public static Builder<T> FontStretchCondensed1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.Condensed;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.Condensed"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchCondensed<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.Condensed;
        return obj;
    }

    public static Builder<T> FontStretchSemiCondensed1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.SemiCondensed;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.SemiCondensed"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchSemiCondensed<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.SemiCondensed;
        return obj;
    }

    public static Builder<T> FontStretchNormal1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.Normal;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.Normal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchNormal<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.Normal;
        return obj;
    }

    public static Builder<T> FontStretchSemiExpanded1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.SemiExpanded;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.SemiExpanded"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchSemiExpanded<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.SemiExpanded;
        return obj;
    }

    public static Builder<T> FontStretchExpanded1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.Expanded;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.Expanded"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchExpanded<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.Expanded;
        return obj;
    }

    public static Builder<T> FontStretchExtraExpanded1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.ExtraExpanded;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.ExtraExpanded"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchExtraExpanded<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.ExtraExpanded;
        return obj;
    }

    public static Builder<T> FontStretchUltraExpanded1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.UltraExpanded;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty"/> property value to <see cref="Avalonia.Media.FontStretch.UltraExpanded"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FontStretchUltraExpanded<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty] = Avalonia.Media.FontStretch.UltraExpanded;
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.ChildProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.ChildProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.ChildProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindChild(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ChildProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.ChildProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Control> ObserveChild(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.ChildProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.ChildProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Presenters.ContentPresenter OnChild(this Avalonia.Controls.Presenters.ContentPresenter obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Controls.Control>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.ChildProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.ContentProperty

    public static Builder<T> Content1<T>(this Builder<T> builder, Builder<System.Object> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.ContentProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Content<T>(this T obj, System.Object value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.ContentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Content<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ContentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Content<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ContentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindContent(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ContentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveContent(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.ContentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnContent<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<System.Object>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.ContentProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty

    public static Builder<T> ContentTemplate1<T>(this Builder<T> builder, Builder<Avalonia.Controls.Templates.IDataTemplate> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ContentTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ContentTemplate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ContentTemplate<T>(
        this T obj,
        IObservable<Avalonia.Controls.Templates.IDataTemplate> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindContentTemplate(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveContentTemplate(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnContentTemplate<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty

    public static Builder<T> HorizontalContentAlignment1<T>(this Builder<T> builder, Builder<Avalonia.Layout.HorizontalAlignment> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(this T obj, Avalonia.Layout.HorizontalAlignment value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(
        this T obj,
        IObservable<Avalonia.Layout.HorizontalAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalContentAlignment(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.HorizontalAlignment> ObserveHorizontalContentAlignment(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalContentAlignment<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Layout.HorizontalAlignment>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> HorizontalContentAlignmentStretch1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Stretch;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Stretch"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Stretch;
        return obj;
    }

    public static Builder<T> HorizontalContentAlignmentLeft1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Left;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentLeft<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Left;
        return obj;
    }

    public static Builder<T> HorizontalContentAlignmentCenter1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Center;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Center;
        return obj;
    }

    public static Builder<T> HorizontalContentAlignmentRight1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Right;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentRight<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Right;
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty

    public static Builder<T> VerticalContentAlignment1<T>(this Builder<T> builder, Builder<Avalonia.Layout.VerticalAlignment> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(this T obj, Avalonia.Layout.VerticalAlignment value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(
        this T obj,
        IObservable<Avalonia.Layout.VerticalAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalContentAlignment(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.VerticalAlignment> ObserveVerticalContentAlignment(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalContentAlignment<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Layout.VerticalAlignment>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> VerticalContentAlignmentStretch1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Stretch;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Stretch"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Stretch;
        return obj;
    }

    public static Builder<T> VerticalContentAlignmentTop1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Top;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentTop<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Top;
        return obj;
    }

    public static Builder<T> VerticalContentAlignmentCenter1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Center;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Center;
        return obj;
    }

    public static Builder<T> VerticalContentAlignmentBottom1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Bottom;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentBottom<T>(this T obj) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Bottom;
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty

    public static Builder<T> Padding1<T>(this Builder<T> builder, Builder<Avalonia.Thickness> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Padding<T>(this T obj, Avalonia.Thickness value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Padding<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Padding<T>(
        this T obj,
        IObservable<Avalonia.Thickness> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPadding(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Thickness> ObservePadding(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPadding<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<Avalonia.Thickness>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty

    public static Builder<T> RecognizesAccessKey1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RecognizesAccessKey<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RecognizesAccessKey<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RecognizesAccessKey<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRecognizesAccessKey(
        this Avalonia.Controls.Presenters.ContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveRecognizesAccessKey(this Avalonia.Controls.Presenters.ContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRecognizesAccessKey<T>(this T obj, Action<Avalonia.Controls.Presenters.ContentPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Presenters.ContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty);
        handler(obj, observable);
        return obj;
    }
}
