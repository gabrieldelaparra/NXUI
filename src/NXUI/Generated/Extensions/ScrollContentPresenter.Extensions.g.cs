// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter"/> class property extension methods.
/// </summary>
public static partial class ScrollContentPresenterExtensions
{
    // Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty

    public static Builder<T> CanHorizontallyScroll1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanHorizontallyScroll<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanHorizontallyScroll<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanHorizontallyScroll<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanHorizontallyScroll(
        this Avalonia.Controls.Presenters.ScrollContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanHorizontallyScroll(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCanHorizontallyScroll<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty

    public static Builder<T> CanVerticallyScroll1<T>(this Builder<T> builder, Builder<System.Boolean> value)
        where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanVerticallyScroll<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanVerticallyScroll<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanVerticallyScroll<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanVerticallyScroll(
        this Avalonia.Controls.Presenters.ScrollContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanVerticallyScroll(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCanVerticallyScroll<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty

    public static Builder<T> Extent1<T>(this Builder<T> builder, Builder<Avalonia.Size> value)
        where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Extent<T>(this T obj, Avalonia.Size value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Extent<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Extent<T>(
        this T obj,
        IObservable<Avalonia.Size> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindExtent(
        this Avalonia.Controls.Presenters.ScrollContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Size> ObserveExtent(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnExtent<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<Avalonia.Size>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty

    public static Builder<T> Offset1<T>(this Builder<T> builder, Builder<Avalonia.Vector> value)
        where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Offset<T>(this T obj, Avalonia.Vector value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Offset<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Offset<T>(
        this T obj,
        IObservable<Avalonia.Vector> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOffset(
        this Avalonia.Controls.Presenters.ScrollContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Vector> ObserveOffset(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOffset<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<Avalonia.Vector>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty

    public static Builder<T> Viewport1<T>(this Builder<T> builder, Builder<Avalonia.Size> value)
        where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        void Setter(T obj) => obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Viewport<T>(this T obj, Avalonia.Size value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Viewport<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Viewport<T>(
        this T obj,
        IObservable<Avalonia.Size> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindViewport(
        this Avalonia.Controls.Presenters.ScrollContentPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Size> ObserveViewport(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnViewport<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<Avalonia.Size>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty);
        handler(obj, observable);
        return obj;
    }

}
