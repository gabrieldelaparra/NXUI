// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.TabControl"/> class property extension methods.
/// </summary>
public static partial class TabControlExtensions
{
    // Avalonia.Controls.TabControl.TabStripPlacementProperty

    public static Builder<T> TabStripPlacement1<T>(this Builder<T> builder, Builder<Avalonia.Controls.Dock> value)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TabStripPlacement<T>(this T obj, Avalonia.Controls.Dock value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TabStripPlacement<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.TabStripPlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TabStripPlacement<T>(
        this T obj,
        IObservable<Avalonia.Controls.Dock> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.TabStripPlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTabStripPlacement(
        this Avalonia.Controls.TabControl obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TabControl.TabStripPlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Dock> ObserveTabStripPlacement(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.TabStripPlacementProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTabStripPlacement<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Controls.Dock>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.TabStripPlacementProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> TabStripPlacementLeft1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Left;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> property value to <see cref="Avalonia.Controls.Dock.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TabStripPlacementLeft<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Left;
        return obj;
    }

    public static Builder<T> TabStripPlacementBottom1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Bottom;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> property value to <see cref="Avalonia.Controls.Dock.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TabStripPlacementBottom<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Bottom;
        return obj;
    }

    public static Builder<T> TabStripPlacementRight1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Right;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> property value to <see cref="Avalonia.Controls.Dock.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TabStripPlacementRight<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Right;
        return obj;
    }

    public static Builder<T> TabStripPlacementTop1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Top;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.TabStripPlacementProperty"/> property value to <see cref="Avalonia.Controls.Dock.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TabStripPlacementTop<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Top;
        return obj;
    }

    // Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty

    public static Builder<T> HorizontalContentAlignment1<T>(this Builder<T> builder, Builder<Avalonia.Layout.HorizontalAlignment> value)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(this T obj, Avalonia.Layout.HorizontalAlignment value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(
        this T obj,
        IObservable<Avalonia.Layout.HorizontalAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalContentAlignment(
        this Avalonia.Controls.TabControl obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.HorizontalAlignment> ObserveHorizontalContentAlignment(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalContentAlignment<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Layout.HorizontalAlignment>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> HorizontalContentAlignmentStretch1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Stretch;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Stretch"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Stretch;
        return obj;
    }

    public static Builder<T> HorizontalContentAlignmentLeft1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Left;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentLeft<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Left;
        return obj;
    }

    public static Builder<T> HorizontalContentAlignmentCenter1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Center;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Center;
        return obj;
    }

    public static Builder<T> HorizontalContentAlignmentRight1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Right;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentRight<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Right;
        return obj;
    }

    // Avalonia.Controls.TabControl.VerticalContentAlignmentProperty

    public static Builder<T> VerticalContentAlignment1<T>(this Builder<T> builder, Builder<Avalonia.Layout.VerticalAlignment> value)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(this T obj, Avalonia.Layout.VerticalAlignment value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(
        this T obj,
        IObservable<Avalonia.Layout.VerticalAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalContentAlignment(
        this Avalonia.Controls.TabControl obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TabControl.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.VerticalAlignment> ObserveVerticalContentAlignment(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.VerticalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalContentAlignment<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Layout.VerticalAlignment>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.VerticalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> VerticalContentAlignmentStretch1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Stretch;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Stretch"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Stretch;
        return obj;
    }

    public static Builder<T> VerticalContentAlignmentTop1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Top;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentTop<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Top;
        return obj;
    }

    public static Builder<T> VerticalContentAlignmentCenter1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Center;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Center;
        return obj;
    }

    public static Builder<T> VerticalContentAlignmentBottom1<T>(this Builder<T> builder)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Bottom;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentBottom<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Bottom;
        return obj;
    }

    // Avalonia.Controls.TabControl.ContentTemplateProperty

    public static Builder<T> ContentTemplate1<T>(this Builder<T> builder, Builder<Avalonia.Controls.Templates.IDataTemplate> value)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.ContentTemplateProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.ContentTemplateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ContentTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.ContentTemplateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.ContentTemplateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ContentTemplate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.ContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.ContentTemplateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ContentTemplate<T>(
        this T obj,
        IObservable<Avalonia.Controls.Templates.IDataTemplate> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.ContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TabControl.ContentTemplateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TabControl.ContentTemplateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindContentTemplate(
        this Avalonia.Controls.TabControl obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TabControl.ContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TabControl.ContentTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveContentTemplate(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.ContentTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TabControl.ContentTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnContentTemplate<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.ContentTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TabControl.SelectedContentProperty

    public static Builder<T> SelectedContent1<T>(this Builder<T> builder, Builder<System.Object> value)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.SelectedContentProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.SelectedContentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedContent<T>(this T obj, System.Object value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.SelectedContentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.SelectedContentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedContent<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.SelectedContentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.SelectedContentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedContent<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.SelectedContentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TabControl.SelectedContentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TabControl.SelectedContentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedContent(
        this Avalonia.Controls.TabControl obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TabControl.SelectedContentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TabControl.SelectedContentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveSelectedContent(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.SelectedContentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TabControl.SelectedContentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedContent<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<System.Object>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.SelectedContentProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TabControl.SelectedContentTemplateProperty

    public static Builder<T> SelectedContentTemplate1<T>(this Builder<T> builder, Builder<Avalonia.Controls.Templates.IDataTemplate> value)
        where T : Avalonia.Controls.TabControl
    {
        void Setter(T obj) => obj[Avalonia.Controls.TabControl.SelectedContentTemplateProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TabControl.SelectedContentTemplateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedContentTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.SelectedContentTemplateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.SelectedContentTemplateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedContentTemplate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.SelectedContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TabControl.SelectedContentTemplateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedContentTemplate<T>(
        this T obj,
        IObservable<Avalonia.Controls.Templates.IDataTemplate> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TabControl
    {
        var descriptor = Avalonia.Controls.TabControl.SelectedContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TabControl.SelectedContentTemplateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TabControl.SelectedContentTemplateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedContentTemplate(
        this Avalonia.Controls.TabControl obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TabControl.SelectedContentTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TabControl.SelectedContentTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveSelectedContentTemplate(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.SelectedContentTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TabControl.SelectedContentTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedContentTemplate<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.SelectedContentTemplateProperty);
        handler(obj, observable);
        return obj;
    }
}
