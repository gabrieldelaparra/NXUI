// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.EllipseGeometry"/> class property extension methods.
/// </summary>
public static partial class EllipseGeometryExtensions
{
    // Avalonia.Media.EllipseGeometry.RectProperty

    public static Builder<T> Rect1<T>(this Builder<T> builder, Builder<Avalonia.Rect> value)
        where T : Avalonia.Media.EllipseGeometry
    {
        void Setter(T obj) => obj[Avalonia.Media.EllipseGeometry.RectProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.EllipseGeometry.RectProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rect<T>(this T obj, Avalonia.Rect value) where T : Avalonia.Media.EllipseGeometry
    {
        obj[Avalonia.Media.EllipseGeometry.RectProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.EllipseGeometry.RectProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rect<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.EllipseGeometry
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.EllipseGeometry.RectProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rect<T>(
        this T obj,
        IObservable<Avalonia.Rect> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.EllipseGeometry
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.EllipseGeometry.RectProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.EllipseGeometry.RectProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRect(
        this Avalonia.Media.EllipseGeometry obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RectProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.EllipseGeometry.RectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Rect> ObserveRect(this Avalonia.Media.EllipseGeometry obj)
    {
        return obj.GetObservable(Avalonia.Media.EllipseGeometry.RectProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.EllipseGeometry.RectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRect<T>(this T obj, Action<Avalonia.Media.EllipseGeometry, IObservable<Avalonia.Rect>> handler) where T : Avalonia.Media.EllipseGeometry
    {
        var observable = obj.GetObservable(Avalonia.Media.EllipseGeometry.RectProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.EllipseGeometry.RadiusXProperty

    public static Builder<T> RadiusX1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.EllipseGeometry
    {
        void Setter(T obj) => obj[Avalonia.Media.EllipseGeometry.RadiusXProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.EllipseGeometry.RadiusXProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RadiusX<T>(this T obj, System.Double value) where T : Avalonia.Media.EllipseGeometry
    {
        obj[Avalonia.Media.EllipseGeometry.RadiusXProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.EllipseGeometry.RadiusXProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RadiusX<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.EllipseGeometry
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RadiusXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.EllipseGeometry.RadiusXProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RadiusX<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.EllipseGeometry
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RadiusXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.EllipseGeometry.RadiusXProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.EllipseGeometry.RadiusXProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRadiusX(
        this Avalonia.Media.EllipseGeometry obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RadiusXProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.EllipseGeometry.RadiusXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveRadiusX(this Avalonia.Media.EllipseGeometry obj)
    {
        return obj.GetObservable(Avalonia.Media.EllipseGeometry.RadiusXProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.EllipseGeometry.RadiusXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRadiusX<T>(this T obj, Action<Avalonia.Media.EllipseGeometry, IObservable<System.Double>> handler) where T : Avalonia.Media.EllipseGeometry
    {
        var observable = obj.GetObservable(Avalonia.Media.EllipseGeometry.RadiusXProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.EllipseGeometry.RadiusYProperty

    public static Builder<T> RadiusY1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Media.EllipseGeometry
    {
        void Setter(T obj) => obj[Avalonia.Media.EllipseGeometry.RadiusYProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.EllipseGeometry.RadiusYProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RadiusY<T>(this T obj, System.Double value) where T : Avalonia.Media.EllipseGeometry
    {
        obj[Avalonia.Media.EllipseGeometry.RadiusYProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.EllipseGeometry.RadiusYProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RadiusY<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.EllipseGeometry
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RadiusYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.EllipseGeometry.RadiusYProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RadiusY<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.EllipseGeometry
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RadiusYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.EllipseGeometry.RadiusYProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.EllipseGeometry.RadiusYProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRadiusY(
        this Avalonia.Media.EllipseGeometry obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.EllipseGeometry.RadiusYProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.EllipseGeometry.RadiusYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveRadiusY(this Avalonia.Media.EllipseGeometry obj)
    {
        return obj.GetObservable(Avalonia.Media.EllipseGeometry.RadiusYProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.EllipseGeometry.RadiusYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRadiusY<T>(this T obj, Action<Avalonia.Media.EllipseGeometry, IObservable<System.Double>> handler) where T : Avalonia.Media.EllipseGeometry
    {
        var observable = obj.GetObservable(Avalonia.Media.EllipseGeometry.RadiusYProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.EllipseGeometry.CenterProperty

    public static Builder<T> Center1<T>(this Builder<T> builder, Builder<Avalonia.Point> value)
        where T : Avalonia.Media.EllipseGeometry
    {
        void Setter(T obj) => obj[Avalonia.Media.EllipseGeometry.CenterProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.EllipseGeometry.CenterProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Center<T>(this T obj, Avalonia.Point value) where T : Avalonia.Media.EllipseGeometry
    {
        obj[Avalonia.Media.EllipseGeometry.CenterProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.EllipseGeometry.CenterProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Center<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.EllipseGeometry
    {
        var descriptor = Avalonia.Media.EllipseGeometry.CenterProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.EllipseGeometry.CenterProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Center<T>(
        this T obj,
        IObservable<Avalonia.Point> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.EllipseGeometry
    {
        var descriptor = Avalonia.Media.EllipseGeometry.CenterProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.EllipseGeometry.CenterProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.EllipseGeometry.CenterProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCenter(
        this Avalonia.Media.EllipseGeometry obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.EllipseGeometry.CenterProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.EllipseGeometry.CenterProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Point> ObserveCenter(this Avalonia.Media.EllipseGeometry obj)
    {
        return obj.GetObservable(Avalonia.Media.EllipseGeometry.CenterProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.EllipseGeometry.CenterProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCenter<T>(this T obj, Action<Avalonia.Media.EllipseGeometry, IObservable<Avalonia.Point>> handler) where T : Avalonia.Media.EllipseGeometry
    {
        var observable = obj.GetObservable(Avalonia.Media.EllipseGeometry.CenterProperty);
        handler(obj, observable);
        return obj;
    }
}
