// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Animation.Animation"/> class property extension methods.
/// </summary>
public static partial class AnimationExtensions
{
    // Avalonia.Animation.Animation.DurationProperty

    public static Builder<T> Duration1<T>(this Builder<T> builder, Builder<System.TimeSpan> value)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.DurationProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.DurationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Duration<T>(this T obj, System.TimeSpan value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DurationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DurationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Duration<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DurationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Duration<T>(
        this T obj,
        IObservable<System.TimeSpan> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.DurationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.DurationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDuration(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.DurationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.TimeSpan> ObserveDuration(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DurationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Animation.Animation.DurationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDuration<T>(this T obj, Action<Avalonia.Animation.Animation, IObservable<System.TimeSpan>> handler) where T : Avalonia.Animation.Animation
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.DurationProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.IterationCountProperty

    public static Builder<T> IterationCount1<T>(this Builder<T> builder, Builder<Avalonia.Animation.IterationCount> value)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.IterationCountProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IterationCount<T>(this T obj, Avalonia.Animation.IterationCount value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.IterationCountProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IterationCount<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IterationCount<T>(
        this T obj,
        IObservable<Avalonia.Animation.IterationCount> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIterationCount(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.IterationCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.IterationCount> ObserveIterationCount(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.IterationCountProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Animation.Animation.IterationCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIterationCount<T>(this T obj, Action<Avalonia.Animation.Animation, IObservable<Avalonia.Animation.IterationCount>> handler) where T : Avalonia.Animation.Animation
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.IterationCountProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.PlaybackDirectionProperty

    public static Builder<T> PlaybackDirection1<T>(this Builder<T> builder, Builder<Avalonia.Animation.PlaybackDirection> value)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlaybackDirection<T>(this T obj, Avalonia.Animation.PlaybackDirection value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlaybackDirection<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlaybackDirection<T>(
        this T obj,
        IObservable<Avalonia.Animation.PlaybackDirection> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlaybackDirection(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.PlaybackDirection> ObservePlaybackDirection(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlaybackDirection<T>(this T obj, Action<Avalonia.Animation.Animation, IObservable<Avalonia.Animation.PlaybackDirection>> handler) where T : Avalonia.Animation.Animation
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> PlaybackDirectionNormal1<T>(this Builder<T> builder)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Normal;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property value to <see cref="Avalonia.Animation.PlaybackDirection.Normal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlaybackDirectionNormal<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Normal;
        return obj;
    }

    public static Builder<T> PlaybackDirectionReverse1<T>(this Builder<T> builder)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Reverse;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property value to <see cref="Avalonia.Animation.PlaybackDirection.Reverse"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlaybackDirectionReverse<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Reverse;
        return obj;
    }

    public static Builder<T> PlaybackDirectionAlternate1<T>(this Builder<T> builder)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Alternate;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property value to <see cref="Avalonia.Animation.PlaybackDirection.Alternate"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlaybackDirectionAlternate<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Alternate;
        return obj;
    }

    public static Builder<T> PlaybackDirectionAlternateReverse1<T>(this Builder<T> builder)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.AlternateReverse;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property value to <see cref="Avalonia.Animation.PlaybackDirection.AlternateReverse"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlaybackDirectionAlternateReverse<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.AlternateReverse;
        return obj;
    }

    // Avalonia.Animation.Animation.FillModeProperty

    public static Builder<T> FillMode1<T>(this Builder<T> builder, Builder<Avalonia.Animation.FillMode> value)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.FillModeProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FillMode<T>(this T obj, Avalonia.Animation.FillMode value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.FillModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FillMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.FillModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FillMode<T>(
        this T obj,
        IObservable<Avalonia.Animation.FillMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.FillModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFillMode(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.FillModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.FillMode> ObserveFillMode(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.FillModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Animation.Animation.FillModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFillMode<T>(this T obj, Action<Avalonia.Animation.Animation, IObservable<Avalonia.Animation.FillMode>> handler) where T : Avalonia.Animation.Animation
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.FillModeProperty);
        handler(obj, observable);
        return obj;
    }

    public static Builder<T> FillModeNone1<T>(this Builder<T> builder)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.None;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property value to <see cref="Avalonia.Animation.FillMode.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FillModeNone<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.None;
        return obj;
    }

    public static Builder<T> FillModeForward1<T>(this Builder<T> builder)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Forward;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property value to <see cref="Avalonia.Animation.FillMode.Forward"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FillModeForward<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Forward;
        return obj;
    }

    public static Builder<T> FillModeBackward1<T>(this Builder<T> builder)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Backward;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property value to <see cref="Avalonia.Animation.FillMode.Backward"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FillModeBackward<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Backward;
        return obj;
    }

    public static Builder<T> FillModeBoth1<T>(this Builder<T> builder)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Both;
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property value to <see cref="Avalonia.Animation.FillMode.Both"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FillModeBoth<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Both;
        return obj;
    }

    // Avalonia.Animation.Animation.EasingProperty

    public static Builder<T> Easing1<T>(this Builder<T> builder, Builder<Avalonia.Animation.Easings.Easing> value)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.EasingProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.EasingProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Easing<T>(this T obj, Avalonia.Animation.Easings.Easing value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.EasingProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.EasingProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Easing<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.EasingProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Easing<T>(
        this T obj,
        IObservable<Avalonia.Animation.Easings.Easing> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.EasingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.EasingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindEasing(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.EasingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.Easings.Easing> ObserveEasing(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.EasingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Animation.Animation.EasingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnEasing<T>(this T obj, Action<Avalonia.Animation.Animation, IObservable<Avalonia.Animation.Easings.Easing>> handler) where T : Avalonia.Animation.Animation
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.EasingProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.DelayProperty

    public static Builder<T> Delay1<T>(this Builder<T> builder, Builder<System.TimeSpan> value)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.DelayProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.DelayProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Delay<T>(this T obj, System.TimeSpan value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DelayProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DelayProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Delay<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DelayProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Delay<T>(
        this T obj,
        IObservable<System.TimeSpan> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.DelayProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.DelayProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDelay(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.DelayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.TimeSpan> ObserveDelay(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DelayProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Animation.Animation.DelayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDelay<T>(this T obj, Action<Avalonia.Animation.Animation, IObservable<System.TimeSpan>> handler) where T : Avalonia.Animation.Animation
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.DelayProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.DelayBetweenIterationsProperty

    public static Builder<T> DelayBetweenIterations1<T>(this Builder<T> builder, Builder<System.TimeSpan> value)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.DelayBetweenIterationsProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DelayBetweenIterations<T>(this T obj, System.TimeSpan value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DelayBetweenIterationsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DelayBetweenIterations<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DelayBetweenIterations<T>(
        this T obj,
        IObservable<System.TimeSpan> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDelayBetweenIterations(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.TimeSpan> ObserveDelayBetweenIterations(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDelayBetweenIterations<T>(this T obj, Action<Avalonia.Animation.Animation, IObservable<System.TimeSpan>> handler) where T : Avalonia.Animation.Animation
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.SpeedRatioProperty

    public static Builder<T> SpeedRatio1<T>(this Builder<T> builder, Builder<System.Double> value)
        where T : Avalonia.Animation.Animation
    {
        void Setter(T obj) => obj[Avalonia.Animation.Animation.SpeedRatioProperty] = value.Build();
        builder.Setters.Add(Setter);
        return builder;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SpeedRatio<T>(this T obj, System.Double value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.SpeedRatioProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SpeedRatio<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SpeedRatio<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Animation.Animation
    {
        var descriptor = Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSpeedRatio(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveSpeedRatio(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSpeedRatio<T>(this T obj, Action<Avalonia.Animation.Animation, IObservable<System.Double>> handler) where T : Avalonia.Animation.Animation
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
        handler(obj, observable);
        return obj;
    }
}
