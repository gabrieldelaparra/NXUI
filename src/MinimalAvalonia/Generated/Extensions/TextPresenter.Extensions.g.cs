// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TextPresenterExtensions
{
    // CaretIndexProperty

    public static T CaretIndex<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.CaretIndexProperty] = value;
        return obj;
    }

    public static T CaretIndex<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.CaretIndexProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CaretIndex<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.CaretIndexProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCaretIndex(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.CaretIndexProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveCaretIndex(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.CaretIndexProperty);
    }

    public static T OnCaretIndex<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.CaretIndexProperty);
        handler(obj, observable);
        return obj;
    }

    // RevealPasswordProperty

    public static T RevealPassword<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.RevealPasswordProperty] = value;
        return obj;
    }

    public static T RevealPassword<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.RevealPasswordProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T RevealPassword<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.RevealPasswordProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRevealPassword(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.RevealPasswordProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveRevealPassword(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.RevealPasswordProperty);
    }

    public static T OnRevealPassword<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.RevealPasswordProperty);
        handler(obj, observable);
        return obj;
    }

    // PasswordCharProperty

    public static T PasswordChar<T>(this T obj, System.Char value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.PasswordCharProperty] = value;
        return obj;
    }

    public static T PasswordChar<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.PasswordCharProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PasswordChar<T>(this T obj, IObservable<System.Char> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.PasswordCharProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPasswordChar(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.PasswordCharProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Char> ObservePasswordChar(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.PasswordCharProperty);
    }

    public static T OnPasswordChar<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<System.Char>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.PasswordCharProperty);
        handler(obj, observable);
        return obj;
    }

    // SelectionStartProperty

    public static T SelectionStart<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.SelectionStartProperty] = value;
        return obj;
    }

    public static T SelectionStart<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.SelectionStartProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectionStart<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.SelectionStartProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectionStart(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.SelectionStartProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveSelectionStart(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.SelectionStartProperty);
    }

    public static T OnSelectionStart<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.SelectionStartProperty);
        handler(obj, observable);
        return obj;
    }

    // SelectionEndProperty

    public static T SelectionEnd<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.SelectionEndProperty] = value;
        return obj;
    }

    public static T SelectionEnd<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.SelectionEndProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectionEnd<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.SelectionEndProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectionEnd(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.SelectionEndProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveSelectionEnd(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.SelectionEndProperty);
    }

    public static T OnSelectionEnd<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.SelectionEndProperty);
        handler(obj, observable);
        return obj;
    }

    // TextProperty

    public static T Text<T>(this T obj, System.String value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextProperty] = value;
        return obj;
    }

    public static T Text<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Text<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindText(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.TextProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveText(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.TextProperty);
    }

    public static T OnText<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<System.String>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.TextProperty);
        handler(obj, observable);
        return obj;
    }

    // TextAlignmentProperty

    public static T TextAlignment<T>(this T obj, Avalonia.Media.TextAlignment value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty] = value;
        return obj;
    }

    public static T TextAlignment<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TextAlignment<T>(this T obj, IObservable<Avalonia.Media.TextAlignment> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTextAlignment(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.TextAlignment> ObserveTextAlignment(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty);
    }

    public static T OnTextAlignment<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<Avalonia.Media.TextAlignment>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static T TextAlignmentLeft<T>(this T obj) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Left;
        return obj;
    }

    public static T TextAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Center;
        return obj;
    }

    public static T TextAlignmentRight<T>(this T obj) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Right;
        return obj;
    }

    // TextWrappingProperty

    public static T TextWrapping<T>(this T obj, Avalonia.Media.TextWrapping value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty] = value;
        return obj;
    }

    public static T TextWrapping<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TextWrapping<T>(this T obj, IObservable<Avalonia.Media.TextWrapping> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTextWrapping(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.TextWrapping> ObserveTextWrapping(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty);
    }

    public static T OnTextWrapping<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<Avalonia.Media.TextWrapping>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty);
        handler(obj, observable);
        return obj;
    }

    public static T TextWrappingNoWrap<T>(this T obj) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty] = Avalonia.Media.TextWrapping.NoWrap;
        return obj;
    }

    public static T TextWrappingWrap<T>(this T obj) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty] = Avalonia.Media.TextWrapping.Wrap;
        return obj;
    }

    public static T TextWrappingWrapWithOverflow<T>(this T obj) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty] = Avalonia.Media.TextWrapping.WrapWithOverflow;
        return obj;
    }

    // BackgroundProperty

    public static T Background<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.BackgroundProperty] = value;
        return obj;
    }

    public static T Background<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.BackgroundProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Background<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        obj[Avalonia.Controls.Presenters.TextPresenter.BackgroundProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindBackground(this Avalonia.Controls.Presenters.TextPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.TextPresenter.BackgroundProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveBackground(this Avalonia.Controls.Presenters.TextPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.BackgroundProperty);
    }

    public static T OnBackground<T>(this T obj, Action<Avalonia.Controls.Presenters.TextPresenter, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Presenters.TextPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.TextPresenter.BackgroundProperty);
        handler(obj, observable);
        return obj;
    }
}
