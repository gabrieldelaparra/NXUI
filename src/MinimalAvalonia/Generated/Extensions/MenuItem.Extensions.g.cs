// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class MenuItemExtensions
{
    // CommandProperty

    public static T Command<T>(this T obj, System.Windows.Input.ICommand value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.CommandProperty] = value;
        return obj;
    }

    public static T Command<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.CommandProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Command<T>(this T obj, IObservable<System.Windows.Input.ICommand> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.CommandProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCommand(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.CommandProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Windows.Input.ICommand> ObserveCommand(this Avalonia.Controls.MenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.MenuItem.CommandProperty);
    }

    public static T OnCommand<T>(this T obj, Action<Avalonia.Controls.MenuItem, IObservable<System.Windows.Input.ICommand>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.MenuItem.CommandProperty);
        handler(obj, observable);
        return obj;
    }

    // CommandParameterProperty

    public static T CommandParameter<T>(this T obj, System.Object value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.CommandParameterProperty] = value;
        return obj;
    }

    public static T CommandParameter<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.CommandParameterProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CommandParameter<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.CommandParameterProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCommandParameter(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.CommandParameterProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveCommandParameter(this Avalonia.Controls.MenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.MenuItem.CommandParameterProperty);
    }

    public static T OnCommandParameter<T>(this T obj, Action<Avalonia.Controls.MenuItem, IObservable<System.Object>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.MenuItem.CommandParameterProperty);
        handler(obj, observable);
        return obj;
    }

    // IconProperty

    public static T Icon<T>(this T obj, System.Object value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IconProperty] = value;
        return obj;
    }

    public static T Icon<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IconProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Icon<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IconProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIcon(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.IconProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveIcon(this Avalonia.Controls.MenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.MenuItem.IconProperty);
    }

    public static T OnIcon<T>(this T obj, Action<Avalonia.Controls.MenuItem, IObservable<System.Object>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.MenuItem.IconProperty);
        handler(obj, observable);
        return obj;
    }

    // InputGestureProperty

    public static T InputGesture<T>(this T obj, Avalonia.Input.KeyGesture value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.InputGestureProperty] = value;
        return obj;
    }

    public static T InputGesture<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.InputGestureProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T InputGesture<T>(this T obj, IObservable<Avalonia.Input.KeyGesture> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.InputGestureProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindInputGesture(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.InputGestureProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Input.KeyGesture> ObserveInputGesture(this Avalonia.Controls.MenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.MenuItem.InputGestureProperty);
    }

    public static T OnInputGesture<T>(this T obj, Action<Avalonia.Controls.MenuItem, IObservable<Avalonia.Input.KeyGesture>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.MenuItem.InputGestureProperty);
        handler(obj, observable);
        return obj;
    }

    // IsSelectedProperty

    public static T IsSelected<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IsSelectedProperty] = value;
        return obj;
    }

    public static T IsSelected<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IsSelectedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsSelected<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IsSelectedProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsSelected(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.IsSelectedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsSelected(this Avalonia.Controls.MenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.MenuItem.IsSelectedProperty);
    }

    public static T OnIsSelected<T>(this T obj, Action<Avalonia.Controls.MenuItem, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.MenuItem.IsSelectedProperty);
        handler(obj, observable);
        return obj;
    }

    // IsSubMenuOpenProperty

    public static T IsSubMenuOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IsSubMenuOpenProperty] = value;
        return obj;
    }

    public static T IsSubMenuOpen<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IsSubMenuOpenProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsSubMenuOpen<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IsSubMenuOpenProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsSubMenuOpen(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.IsSubMenuOpenProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsSubMenuOpen(this Avalonia.Controls.MenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.MenuItem.IsSubMenuOpenProperty);
    }

    public static T OnIsSubMenuOpen<T>(this T obj, Action<Avalonia.Controls.MenuItem, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.MenuItem.IsSubMenuOpenProperty);
        handler(obj, observable);
        return obj;
    }

    // ClickEvent

    public static T OnClickHandler<T>(this T obj, Action<T, Avalonia.Interactivity.RoutedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.MenuItem
    {
        obj.AddHandler(Avalonia.Controls.MenuItem.ClickEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnClick<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.MenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.MenuItem.ClickEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnClick(this Avalonia.Controls.MenuItem obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.MenuItem.ClickEvent, routes);
    }

    // SubmenuOpenedEvent

    public static T OnSubmenuOpenedHandler<T>(this T obj, Action<T, Avalonia.Interactivity.RoutedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.MenuItem
    {
        obj.AddHandler(Avalonia.Controls.MenuItem.SubmenuOpenedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnSubmenuOpened<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.MenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.MenuItem.SubmenuOpenedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnSubmenuOpened(this Avalonia.Controls.MenuItem obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.MenuItem.SubmenuOpenedEvent, routes);
    }

    // Click

    public static T OnClickEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.Click += h, 
                h => obj.Click -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnClickEvent(this Avalonia.Controls.MenuItem obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.Click += h, 
                h => obj.Click -= h)
            .Select(x => x.EventArgs);
    }

    // PointerEnterItem

    public static T OnPointerEnterItemEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerEventArgs>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerEnterItem += h, 
                h => obj.PointerEnterItem -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerEventArgs> ObserveOnPointerEnterItemEvent(this Avalonia.Controls.MenuItem obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerEnterItem += h, 
                h => obj.PointerEnterItem -= h)
            .Select(x => x.EventArgs);
    }

    // PointerLeaveItem

    public static T OnPointerLeaveItemEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerEventArgs>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerLeaveItem += h, 
                h => obj.PointerLeaveItem -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerEventArgs> ObserveOnPointerLeaveItemEvent(this Avalonia.Controls.MenuItem obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerLeaveItem += h, 
                h => obj.PointerLeaveItem -= h)
            .Select(x => x.EventArgs);
    }

    // SubmenuOpened

    public static T OnSubmenuOpenedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Controls.MenuItem
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.SubmenuOpened += h, 
                h => obj.SubmenuOpened -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnSubmenuOpenedEvent(this Avalonia.Controls.MenuItem obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.SubmenuOpened += h, 
                h => obj.SubmenuOpened -= h)
            .Select(x => x.EventArgs);
    }
}
