// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class InputElementExtensions
{
    // FocusableProperty

    public static T Focusable<T>(this T obj, System.Boolean value) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.FocusableProperty] = value;
        return obj;
    }

    public static T Focusable<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.FocusableProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Focusable<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.FocusableProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFocusable(this Avalonia.Input.InputElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Input.InputElement.FocusableProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveFocusable(this Avalonia.Input.InputElement obj)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.FocusableProperty);
    }

    public static T OnFocusable<T>(this T obj, Action<Avalonia.Input.InputElement, IObservable<System.Boolean>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.FocusableProperty);
        handler(obj, observable);
        return obj;
    }

    // IsEnabledProperty

    public static T IsEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.IsEnabledProperty] = value;
        return obj;
    }

    public static T IsEnabled<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.IsEnabledProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsEnabled<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.IsEnabledProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsEnabled(this Avalonia.Input.InputElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Input.InputElement.IsEnabledProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsEnabled(this Avalonia.Input.InputElement obj)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.IsEnabledProperty);
    }

    public static T OnIsEnabled<T>(this T obj, Action<Avalonia.Input.InputElement, IObservable<System.Boolean>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.IsEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    // IsEffectivelyEnabledProperty

    public static Avalonia.Data.IBinding BindIsEffectivelyEnabled(this Avalonia.Input.InputElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Input.InputElement.IsEffectivelyEnabledProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsEffectivelyEnabled(this Avalonia.Input.InputElement obj)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.IsEffectivelyEnabledProperty);
    }

    public static Avalonia.Input.InputElement OnIsEffectivelyEnabled(this Avalonia.Input.InputElement obj, Action<Avalonia.Input.InputElement, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.IsEffectivelyEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    // CursorProperty

    public static T Cursor<T>(this T obj, Avalonia.Input.Cursor value) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.CursorProperty] = value;
        return obj;
    }

    public static T Cursor<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.CursorProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Cursor<T>(this T obj, IObservable<Avalonia.Input.Cursor> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.CursorProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCursor(this Avalonia.Input.InputElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Input.InputElement.CursorProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Input.Cursor> ObserveCursor(this Avalonia.Input.InputElement obj)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.CursorProperty);
    }

    public static T OnCursor<T>(this T obj, Action<Avalonia.Input.InputElement, IObservable<Avalonia.Input.Cursor>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.CursorProperty);
        handler(obj, observable);
        return obj;
    }

    // IsKeyboardFocusWithinProperty

    public static Avalonia.Data.IBinding BindIsKeyboardFocusWithin(this Avalonia.Input.InputElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsKeyboardFocusWithin(this Avalonia.Input.InputElement obj)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty);
    }

    public static Avalonia.Input.InputElement OnIsKeyboardFocusWithin(this Avalonia.Input.InputElement obj, Action<Avalonia.Input.InputElement, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty);
        handler(obj, observable);
        return obj;
    }

    // IsFocusedProperty

    public static Avalonia.Data.IBinding BindIsFocused(this Avalonia.Input.InputElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Input.InputElement.IsFocusedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsFocused(this Avalonia.Input.InputElement obj)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.IsFocusedProperty);
    }

    public static Avalonia.Input.InputElement OnIsFocused(this Avalonia.Input.InputElement obj, Action<Avalonia.Input.InputElement, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.IsFocusedProperty);
        handler(obj, observable);
        return obj;
    }

    // IsHitTestVisibleProperty

    public static T IsHitTestVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.IsHitTestVisibleProperty] = value;
        return obj;
    }

    public static T IsHitTestVisible<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.IsHitTestVisibleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsHitTestVisible<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.InputElement
    {
        obj[Avalonia.Input.InputElement.IsHitTestVisibleProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsHitTestVisible(this Avalonia.Input.InputElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Input.InputElement.IsHitTestVisibleProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsHitTestVisible(this Avalonia.Input.InputElement obj)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.IsHitTestVisibleProperty);
    }

    public static T OnIsHitTestVisible<T>(this T obj, Action<Avalonia.Input.InputElement, IObservable<System.Boolean>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.IsHitTestVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // IsPointerOverProperty

    public static Avalonia.Data.IBinding BindIsPointerOver(this Avalonia.Input.InputElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Input.InputElement.IsPointerOverProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsPointerOver(this Avalonia.Input.InputElement obj)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.IsPointerOverProperty);
    }

    public static Avalonia.Input.InputElement OnIsPointerOver(this Avalonia.Input.InputElement obj, Action<Avalonia.Input.InputElement, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.IsPointerOverProperty);
        handler(obj, observable);
        return obj;
    }

    // GotFocusEvent

    public static T OnGotFocusHandler<T>(this T obj, Action<T, Avalonia.Input.GotFocusEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.GotFocusEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnGotFocus<T>(this T obj, Action<T, IObservable<Avalonia.Input.GotFocusEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.GotFocusEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.GotFocusEventArgs> ObserveOnGotFocus(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.GotFocusEvent, routes);
    }

    // LostFocusEvent

    public static T OnLostFocusHandler<T>(this T obj, Action<T, Avalonia.Interactivity.RoutedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.LostFocusEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnLostFocus<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.LostFocusEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnLostFocus(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.LostFocusEvent, routes);
    }

    // KeyDownEvent

    public static T OnKeyDownHandler<T>(this T obj, Action<T, Avalonia.Input.KeyEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.KeyDownEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnKeyDown<T>(this T obj, Action<T, IObservable<Avalonia.Input.KeyEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.KeyDownEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.KeyEventArgs> ObserveOnKeyDown(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.KeyDownEvent, routes);
    }

    // KeyUpEvent

    public static T OnKeyUpHandler<T>(this T obj, Action<T, Avalonia.Input.KeyEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.KeyUpEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnKeyUp<T>(this T obj, Action<T, IObservable<Avalonia.Input.KeyEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.KeyUpEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.KeyEventArgs> ObserveOnKeyUp(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.KeyUpEvent, routes);
    }

    // TextInputEvent

    public static T OnTextInputHandler<T>(this T obj, Action<T, Avalonia.Input.TextInputEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.TextInputEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnTextInput<T>(this T obj, Action<T, IObservable<Avalonia.Input.TextInputEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.TextInputEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.TextInputEventArgs> ObserveOnTextInput(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.TextInputEvent, routes);
    }

    // TextInputMethodClientRequestedEvent

    public static T OnTextInputMethodClientRequestedHandler<T>(this T obj, Action<T, Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.TextInputMethodClientRequestedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnTextInputMethodClientRequested<T>(this T obj, Action<T, IObservable<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.TextInputMethodClientRequestedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs> ObserveOnTextInputMethodClientRequested(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.TextInputMethodClientRequestedEvent, routes);
    }

    // TextInputOptionsQueryEvent

    public static T OnTextInputOptionsQueryHandler<T>(this T obj, Action<T, Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.TextInputOptionsQueryEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnTextInputOptionsQuery<T>(this T obj, Action<T, IObservable<Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.TextInputOptionsQueryEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs> ObserveOnTextInputOptionsQuery(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.TextInputOptionsQueryEvent, routes);
    }

    // PointerEnterEvent

    public static T OnPointerEnterHandler<T>(this T obj, Action<T, Avalonia.Input.PointerEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.PointerEnterEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnPointerEnter<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.PointerEnterEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerEventArgs> ObserveOnPointerEnter(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.PointerEnterEvent, routes);
    }

    // PointerLeaveEvent

    public static T OnPointerLeaveHandler<T>(this T obj, Action<T, Avalonia.Input.PointerEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.PointerLeaveEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnPointerLeave<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.PointerLeaveEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerEventArgs> ObserveOnPointerLeave(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.PointerLeaveEvent, routes);
    }

    // PointerPressedEvent

    public static T OnPointerPressedHandler<T>(this T obj, Action<T, Avalonia.Input.PointerPressedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.PointerPressedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnPointerPressed<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerPressedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.PointerPressedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerPressedEventArgs> ObserveOnPointerPressed(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.PointerPressedEvent, routes);
    }

    // PointerReleasedEvent

    public static T OnPointerReleasedHandler<T>(this T obj, Action<T, Avalonia.Input.PointerReleasedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.PointerReleasedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnPointerReleased<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerReleasedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.PointerReleasedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerReleasedEventArgs> ObserveOnPointerReleased(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.PointerReleasedEvent, routes);
    }

    // PointerCaptureLostEvent

    public static T OnPointerCaptureLostHandler<T>(this T obj, Action<T, Avalonia.Input.PointerCaptureLostEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.PointerCaptureLostEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnPointerCaptureLost<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerCaptureLostEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.PointerCaptureLostEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerCaptureLostEventArgs> ObserveOnPointerCaptureLost(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.PointerCaptureLostEvent, routes);
    }

    // PointerWheelChangedEvent

    public static T OnPointerWheelChangedHandler<T>(this T obj, Action<T, Avalonia.Input.PointerWheelEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        obj.AddHandler(Avalonia.Input.InputElement.PointerWheelChangedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnPointerWheelChanged<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerWheelEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Input.InputElement
    {
        var observable = obj.GetObservable(Avalonia.Input.InputElement.PointerWheelChangedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerWheelEventArgs> ObserveOnPointerWheelChanged(this Avalonia.Input.InputElement obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Input.InputElement.PointerWheelChangedEvent, routes);
    }

    // GotFocus

    public static T OnGotFocusEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.GotFocusEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.GotFocusEventArgs>, Avalonia.Input.GotFocusEventArgs>(
                h => obj.GotFocus += h, 
                h => obj.GotFocus -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.GotFocusEventArgs> ObserveOnGotFocusEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.GotFocusEventArgs>, Avalonia.Input.GotFocusEventArgs>(
                h => obj.GotFocus += h, 
                h => obj.GotFocus -= h)
            .Select(x => x.EventArgs);
    }

    // LostFocus

    public static T OnLostFocusEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.LostFocus += h, 
                h => obj.LostFocus -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnLostFocusEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.LostFocus += h, 
                h => obj.LostFocus -= h)
            .Select(x => x.EventArgs);
    }

    // KeyDown

    public static T OnKeyDownEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.KeyEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.KeyEventArgs>, Avalonia.Input.KeyEventArgs>(
                h => obj.KeyDown += h, 
                h => obj.KeyDown -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.KeyEventArgs> ObserveOnKeyDownEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.KeyEventArgs>, Avalonia.Input.KeyEventArgs>(
                h => obj.KeyDown += h, 
                h => obj.KeyDown -= h)
            .Select(x => x.EventArgs);
    }

    // KeyUp

    public static T OnKeyUpEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.KeyEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.KeyEventArgs>, Avalonia.Input.KeyEventArgs>(
                h => obj.KeyUp += h, 
                h => obj.KeyUp -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.KeyEventArgs> ObserveOnKeyUpEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.KeyEventArgs>, Avalonia.Input.KeyEventArgs>(
                h => obj.KeyUp += h, 
                h => obj.KeyUp -= h)
            .Select(x => x.EventArgs);
    }

    // TextInput

    public static T OnTextInputEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.TextInputEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.TextInputEventArgs>, Avalonia.Input.TextInputEventArgs>(
                h => obj.TextInput += h, 
                h => obj.TextInput -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.TextInputEventArgs> ObserveOnTextInputEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.TextInputEventArgs>, Avalonia.Input.TextInputEventArgs>(
                h => obj.TextInput += h, 
                h => obj.TextInput -= h)
            .Select(x => x.EventArgs);
    }

    // TextInputMethodClientRequested

    public static T OnTextInputMethodClientRequestedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs>, Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs>(
                h => obj.TextInputMethodClientRequested += h, 
                h => obj.TextInputMethodClientRequested -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs> ObserveOnTextInputMethodClientRequestedEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs>, Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs>(
                h => obj.TextInputMethodClientRequested += h, 
                h => obj.TextInputMethodClientRequested -= h)
            .Select(x => x.EventArgs);
    }

    // TextInputOptionsQuery

    public static T OnTextInputOptionsQueryEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs>, Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs>(
                h => obj.TextInputOptionsQuery += h, 
                h => obj.TextInputOptionsQuery -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs> ObserveOnTextInputOptionsQueryEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs>, Avalonia.Input.TextInput.TextInputOptionsQueryEventArgs>(
                h => obj.TextInputOptionsQuery += h, 
                h => obj.TextInputOptionsQuery -= h)
            .Select(x => x.EventArgs);
    }

    // PointerEnter

    public static T OnPointerEnterEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerEnter += h, 
                h => obj.PointerEnter -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerEventArgs> ObserveOnPointerEnterEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerEnter += h, 
                h => obj.PointerEnter -= h)
            .Select(x => x.EventArgs);
    }

    // PointerLeave

    public static T OnPointerLeaveEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerLeave += h, 
                h => obj.PointerLeave -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerEventArgs> ObserveOnPointerLeaveEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerLeave += h, 
                h => obj.PointerLeave -= h)
            .Select(x => x.EventArgs);
    }

    // PointerMoved

    public static T OnPointerMovedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerMoved += h, 
                h => obj.PointerMoved -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerEventArgs> ObserveOnPointerMovedEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerEventArgs>, Avalonia.Input.PointerEventArgs>(
                h => obj.PointerMoved += h, 
                h => obj.PointerMoved -= h)
            .Select(x => x.EventArgs);
    }

    // PointerPressed

    public static T OnPointerPressedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerPressedEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerPressedEventArgs>, Avalonia.Input.PointerPressedEventArgs>(
                h => obj.PointerPressed += h, 
                h => obj.PointerPressed -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerPressedEventArgs> ObserveOnPointerPressedEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerPressedEventArgs>, Avalonia.Input.PointerPressedEventArgs>(
                h => obj.PointerPressed += h, 
                h => obj.PointerPressed -= h)
            .Select(x => x.EventArgs);
    }

    // PointerReleased

    public static T OnPointerReleasedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerReleasedEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerReleasedEventArgs>, Avalonia.Input.PointerReleasedEventArgs>(
                h => obj.PointerReleased += h, 
                h => obj.PointerReleased -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerReleasedEventArgs> ObserveOnPointerReleasedEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerReleasedEventArgs>, Avalonia.Input.PointerReleasedEventArgs>(
                h => obj.PointerReleased += h, 
                h => obj.PointerReleased -= h)
            .Select(x => x.EventArgs);
    }

    // PointerCaptureLost

    public static T OnPointerCaptureLostEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerCaptureLostEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerCaptureLostEventArgs>, Avalonia.Input.PointerCaptureLostEventArgs>(
                h => obj.PointerCaptureLost += h, 
                h => obj.PointerCaptureLost -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerCaptureLostEventArgs> ObserveOnPointerCaptureLostEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerCaptureLostEventArgs>, Avalonia.Input.PointerCaptureLostEventArgs>(
                h => obj.PointerCaptureLost += h, 
                h => obj.PointerCaptureLost -= h)
            .Select(x => x.EventArgs);
    }

    // PointerWheelChanged

    public static T OnPointerWheelChangedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.PointerWheelEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerWheelEventArgs>, Avalonia.Input.PointerWheelEventArgs>(
                h => obj.PointerWheelChanged += h, 
                h => obj.PointerWheelChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.PointerWheelEventArgs> ObserveOnPointerWheelChangedEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.PointerWheelEventArgs>, Avalonia.Input.PointerWheelEventArgs>(
                h => obj.PointerWheelChanged += h, 
                h => obj.PointerWheelChanged -= h)
            .Select(x => x.EventArgs);
    }

    // Tapped

    public static T OnTappedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.Tapped += h, 
                h => obj.Tapped -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnTappedEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.Tapped += h, 
                h => obj.Tapped -= h)
            .Select(x => x.EventArgs);
    }

    // DoubleTapped

    public static T OnDoubleTappedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Input.InputElement
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.DoubleTapped += h, 
                h => obj.DoubleTapped -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnDoubleTappedEvent(this Avalonia.Input.InputElement obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.DoubleTapped += h, 
                h => obj.DoubleTapped -= h)
            .Select(x => x.EventArgs);
    }
}
