// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class VisualExtensions
{
    // BoundsProperty

    public static Avalonia.Data.IBinding BindBounds(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Visual.BoundsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Rect> ObserveBounds(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.BoundsProperty);
    }

    public static Avalonia.Visual OnBounds(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<Avalonia.Rect>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Visual.BoundsProperty);
        handler(obj, observable);
        return obj;
    }

    // TransformedBoundsProperty

    public static Avalonia.Data.IBinding BindTransformedBounds(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Visual.TransformedBoundsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Nullable<Avalonia.VisualTree.TransformedBounds>> ObserveTransformedBounds(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.TransformedBoundsProperty);
    }

    public static Avalonia.Visual OnTransformedBounds(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<System.Nullable<Avalonia.VisualTree.TransformedBounds>>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Visual.TransformedBoundsProperty);
        handler(obj, observable);
        return obj;
    }

    // ClipToBoundsProperty

    public static T ClipToBounds<T>(this T obj, System.Boolean value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipToBoundsProperty] = value;
        return obj;
    }

    public static T ClipToBounds<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipToBoundsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ClipToBounds<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipToBoundsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindClipToBounds(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.ClipToBoundsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveClipToBounds(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.ClipToBoundsProperty);
    }

    public static T OnClipToBounds<T>(this T obj, Action<Avalonia.Visual, IObservable<System.Boolean>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.ClipToBoundsProperty);
        handler(obj, observable);
        return obj;
    }

    // ClipProperty

    public static T Clip<T>(this T obj, Avalonia.Media.Geometry value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipProperty] = value;
        return obj;
    }

    public static T Clip<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Clip<T>(this T obj, IObservable<Avalonia.Media.Geometry> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindClip(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.ClipProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Geometry> ObserveClip(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.ClipProperty);
    }

    public static T OnClip<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.Media.Geometry>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.ClipProperty);
        handler(obj, observable);
        return obj;
    }

    // IsVisibleProperty

    public static T IsVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.IsVisibleProperty] = value;
        return obj;
    }

    public static T IsVisible<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.IsVisibleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsVisible<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.IsVisibleProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsVisible(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.IsVisibleProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsVisible(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.IsVisibleProperty);
    }

    public static T OnIsVisible<T>(this T obj, Action<Avalonia.Visual, IObservable<System.Boolean>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.IsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // OpacityProperty

    public static T Opacity<T>(this T obj, System.Double value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityProperty] = value;
        return obj;
    }

    public static T Opacity<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Opacity<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOpacity(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.OpacityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveOpacity(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.OpacityProperty);
    }

    public static T OnOpacity<T>(this T obj, Action<Avalonia.Visual, IObservable<System.Double>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.OpacityProperty);
        handler(obj, observable);
        return obj;
    }

    // OpacityMaskProperty

    public static T OpacityMask<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityMaskProperty] = value;
        return obj;
    }

    public static T OpacityMask<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityMaskProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T OpacityMask<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityMaskProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOpacityMask(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.OpacityMaskProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveOpacityMask(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.OpacityMaskProperty);
    }

    public static T OnOpacityMask<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.OpacityMaskProperty);
        handler(obj, observable);
        return obj;
    }

    // RenderTransformProperty

    public static T RenderTransform<T>(this T obj, Avalonia.Media.ITransform value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformProperty] = value;
        return obj;
    }

    public static T RenderTransform<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T RenderTransform<T>(this T obj, IObservable<Avalonia.Media.ITransform> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRenderTransform(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.RenderTransformProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.ITransform> ObserveRenderTransform(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.RenderTransformProperty);
    }

    public static T OnRenderTransform<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.Media.ITransform>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.RenderTransformProperty);
        handler(obj, observable);
        return obj;
    }

    // RenderTransformOriginProperty

    public static T RenderTransformOrigin<T>(this T obj, Avalonia.RelativePoint value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformOriginProperty] = value;
        return obj;
    }

    public static T RenderTransformOrigin<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformOriginProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T RenderTransformOrigin<T>(this T obj, IObservable<Avalonia.RelativePoint> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformOriginProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRenderTransformOrigin(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.RenderTransformOriginProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.RelativePoint> ObserveRenderTransformOrigin(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.RenderTransformOriginProperty);
    }

    public static T OnRenderTransformOrigin<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.RelativePoint>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.RenderTransformOriginProperty);
        handler(obj, observable);
        return obj;
    }

    // VisualParentProperty

    public static Avalonia.Data.IBinding BindVisualParent(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Visual.VisualParentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.VisualTree.IVisual> ObserveVisualParent(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.VisualParentProperty);
    }

    public static Avalonia.Visual OnVisualParent(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<Avalonia.VisualTree.IVisual>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Visual.VisualParentProperty);
        handler(obj, observable);
        return obj;
    }

    // ZIndexProperty

    public static T ZIndex<T>(this T obj, System.Int32 value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ZIndexProperty] = value;
        return obj;
    }

    public static T ZIndex<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ZIndexProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ZIndex<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ZIndexProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindZIndex(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.ZIndexProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveZIndex(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.ZIndexProperty);
    }

    public static T OnZIndex<T>(this T obj, Action<Avalonia.Visual, IObservable<System.Int32>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.ZIndexProperty);
        handler(obj, observable);
        return obj;
    }
}
