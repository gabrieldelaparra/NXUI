// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ControlExtensions
{
    // FocusAdornerProperty

    public static T FocusAdorner<T>(this T obj, Avalonia.Controls.ITemplate<Avalonia.Controls.IControl> value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FocusAdornerProperty] = value;
        return obj;
    }

    public static T FocusAdorner<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FocusAdornerProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T FocusAdorner<T>(this T obj, IObservable<Avalonia.Controls.ITemplate<Avalonia.Controls.IControl>> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FocusAdornerProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFocusAdorner(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.FocusAdornerProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.ITemplate<Avalonia.Controls.IControl>> ObserveFocusAdorner(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Control.FocusAdornerProperty);
    }

    public static T OnFocusAdorner<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<Avalonia.Controls.ITemplate<Avalonia.Controls.IControl>>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Control.FocusAdornerProperty);
        handler(obj, observable);
        return obj;
    }

    // TagProperty

    public static T Tag<T>(this T obj, System.Object value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.TagProperty] = value;
        return obj;
    }

    public static T Tag<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.TagProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Tag<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.TagProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTag(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.TagProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveTag(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Control.TagProperty);
    }

    public static T OnTag<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<System.Object>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Control.TagProperty);
        handler(obj, observable);
        return obj;
    }

    // ContextMenuProperty

    public static T ContextMenu<T>(this T obj, Avalonia.Controls.ContextMenu value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextMenuProperty] = value;
        return obj;
    }

    public static T ContextMenu<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextMenuProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ContextMenu<T>(this T obj, IObservable<Avalonia.Controls.ContextMenu> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextMenuProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindContextMenu(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.ContextMenuProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.ContextMenu> ObserveContextMenu(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Control.ContextMenuProperty);
    }

    public static T OnContextMenu<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<Avalonia.Controls.ContextMenu>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Control.ContextMenuProperty);
        handler(obj, observable);
        return obj;
    }

    // ContextFlyoutProperty

    public static T ContextFlyout<T>(this T obj, Avalonia.Controls.Primitives.FlyoutBase value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextFlyoutProperty] = value;
        return obj;
    }

    public static T ContextFlyout<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextFlyoutProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ContextFlyout<T>(this T obj, IObservable<Avalonia.Controls.Primitives.FlyoutBase> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextFlyoutProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindContextFlyout(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.ContextFlyoutProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.FlyoutBase> ObserveContextFlyout(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Control.ContextFlyoutProperty);
    }

    public static T OnContextFlyout<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<Avalonia.Controls.Primitives.FlyoutBase>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Control.ContextFlyoutProperty);
        handler(obj, observable);
        return obj;
    }

    // RequestBringIntoViewEvent

    public static T OnRequestBringIntoViewHandler<T>(this T obj, Action<T, Avalonia.Controls.RequestBringIntoViewEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Control
    {
        obj.AddHandler(Avalonia.Controls.Control.RequestBringIntoViewEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnRequestBringIntoView<T>(this T obj, Action<T, IObservable<Avalonia.Controls.RequestBringIntoViewEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Control.RequestBringIntoViewEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.RequestBringIntoViewEventArgs> ObserveOnRequestBringIntoView(this Avalonia.Controls.Control obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.Control.RequestBringIntoViewEvent, routes);
    }

    // ContextRequestedEvent

    public static T OnContextRequestedHandler<T>(this T obj, Action<T, Avalonia.Controls.ContextRequestedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Control
    {
        obj.AddHandler(Avalonia.Controls.Control.ContextRequestedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnContextRequested<T>(this T obj, Action<T, IObservable<Avalonia.Controls.ContextRequestedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Control.ContextRequestedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.ContextRequestedEventArgs> ObserveOnContextRequested(this Avalonia.Controls.Control obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Tunnel | Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.Control.ContextRequestedEvent, routes);
    }

    // ContextRequested

    public static T OnContextRequestedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.ContextRequestedEventArgs>> handler) where T : Avalonia.Controls.Control
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.ContextRequestedEventArgs>, Avalonia.Controls.ContextRequestedEventArgs>(
                h => obj.ContextRequested += h, 
                h => obj.ContextRequested -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.ContextRequestedEventArgs> ObserveOnContextRequestedEvent(this Avalonia.Controls.Control obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.ContextRequestedEventArgs>, Avalonia.Controls.ContextRequestedEventArgs>(
                h => obj.ContextRequested += h, 
                h => obj.ContextRequested -= h)
            .Select(x => x.EventArgs);
    }
}
