// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TextBoxExtensions
{
    // AcceptsReturnProperty

    public static T AcceptsReturn<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsReturnProperty] = value;
        return obj;
    }

    public static T AcceptsReturn<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsReturnProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AcceptsReturn<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsReturnProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAcceptsReturn(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.AcceptsReturnProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveAcceptsReturn(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.AcceptsReturnProperty);
    }

    public static T OnAcceptsReturn<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.AcceptsReturnProperty);
        handler(obj, observable);
        return obj;
    }

    // AcceptsTabProperty

    public static T AcceptsTab<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsTabProperty] = value;
        return obj;
    }

    public static T AcceptsTab<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsTabProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AcceptsTab<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsTabProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAcceptsTab(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.AcceptsTabProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveAcceptsTab(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.AcceptsTabProperty);
    }

    public static T OnAcceptsTab<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.AcceptsTabProperty);
        handler(obj, observable);
        return obj;
    }

    // CaretIndexProperty

    public static T CaretIndex<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretIndexProperty] = value;
        return obj;
    }

    public static T CaretIndex<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretIndexProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CaretIndex<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretIndexProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCaretIndex(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.CaretIndexProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveCaretIndex(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CaretIndexProperty);
    }

    public static T OnCaretIndex<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Int32>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.CaretIndexProperty);
        handler(obj, observable);
        return obj;
    }

    // IsReadOnlyProperty

    public static T IsReadOnly<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsReadOnlyProperty] = value;
        return obj;
    }

    public static T IsReadOnly<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsReadOnlyProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsReadOnly<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsReadOnlyProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsReadOnly(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.IsReadOnlyProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsReadOnly(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.IsReadOnlyProperty);
    }

    public static T OnIsReadOnly<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.IsReadOnlyProperty);
        handler(obj, observable);
        return obj;
    }

    // PasswordCharProperty

    public static T PasswordChar<T>(this T obj, System.Char value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.PasswordCharProperty] = value;
        return obj;
    }

    public static T PasswordChar<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PasswordChar<T>(this T obj, IObservable<System.Char> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPasswordChar(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Char> ObservePasswordChar(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.PasswordCharProperty);
    }

    public static T OnPasswordChar<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Char>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.PasswordCharProperty);
        handler(obj, observable);
        return obj;
    }

    // SelectionStartProperty

    public static T SelectionStart<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionStartProperty] = value;
        return obj;
    }

    public static T SelectionStart<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionStartProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectionStart<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionStartProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectionStart(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.SelectionStartProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveSelectionStart(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.SelectionStartProperty);
    }

    public static T OnSelectionStart<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Int32>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.SelectionStartProperty);
        handler(obj, observable);
        return obj;
    }

    // SelectionEndProperty

    public static T SelectionEnd<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionEndProperty] = value;
        return obj;
    }

    public static T SelectionEnd<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionEndProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectionEnd<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionEndProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectionEnd(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.SelectionEndProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveSelectionEnd(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.SelectionEndProperty);
    }

    public static T OnSelectionEnd<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Int32>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.SelectionEndProperty);
        handler(obj, observable);
        return obj;
    }

    // MaxLengthProperty

    public static T MaxLength<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLengthProperty] = value;
        return obj;
    }

    public static T MaxLength<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLengthProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MaxLength<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLengthProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaxLength(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.MaxLengthProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveMaxLength(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.MaxLengthProperty);
    }

    public static T OnMaxLength<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Int32>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.MaxLengthProperty);
        handler(obj, observable);
        return obj;
    }

    // TextProperty

    public static T Text<T>(this T obj, System.String value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextProperty] = value;
        return obj;
    }

    public static T Text<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Text<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindText(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.TextProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveText(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.TextProperty);
    }

    public static T OnText<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.String>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.TextProperty);
        handler(obj, observable);
        return obj;
    }

    // TextAlignmentProperty

    public static T TextAlignment<T>(this T obj, Avalonia.Media.TextAlignment value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextAlignmentProperty] = value;
        return obj;
    }

    public static T TextAlignment<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextAlignmentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TextAlignment<T>(this T obj, IObservable<Avalonia.Media.TextAlignment> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextAlignmentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTextAlignment(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.TextAlignmentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.TextAlignment> ObserveTextAlignment(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.TextAlignmentProperty);
    }

    public static T OnTextAlignment<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<Avalonia.Media.TextAlignment>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.TextAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static T TextAlignmentLeft<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Left;
        return obj;
    }

    public static T TextAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Center;
        return obj;
    }

    public static T TextAlignmentRight<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Right;
        return obj;
    }

    // HorizontalContentAlignmentProperty

    public static T HorizontalContentAlignment<T>(this T obj, Avalonia.Layout.HorizontalAlignment value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty] = value;
        return obj;
    }

    public static T HorizontalContentAlignment<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T HorizontalContentAlignment<T>(this T obj, IObservable<Avalonia.Layout.HorizontalAlignment> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHorizontalContentAlignment(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Layout.HorizontalAlignment> ObserveHorizontalContentAlignment(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty);
    }

    public static T OnHorizontalContentAlignment<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<Avalonia.Layout.HorizontalAlignment>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static T HorizontalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Stretch;
        return obj;
    }

    public static T HorizontalContentAlignmentLeft<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Left;
        return obj;
    }

    public static T HorizontalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Center;
        return obj;
    }

    public static T HorizontalContentAlignmentRight<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Right;
        return obj;
    }

    // VerticalContentAlignmentProperty

    public static T VerticalContentAlignment<T>(this T obj, Avalonia.Layout.VerticalAlignment value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.VerticalContentAlignmentProperty] = value;
        return obj;
    }

    public static T VerticalContentAlignment<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.VerticalContentAlignmentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T VerticalContentAlignment<T>(this T obj, IObservable<Avalonia.Layout.VerticalAlignment> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.VerticalContentAlignmentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindVerticalContentAlignment(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.VerticalContentAlignmentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Layout.VerticalAlignment> ObserveVerticalContentAlignment(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.VerticalContentAlignmentProperty);
    }

    public static T OnVerticalContentAlignment<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<Avalonia.Layout.VerticalAlignment>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.VerticalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static T VerticalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Stretch;
        return obj;
    }

    public static T VerticalContentAlignmentTop<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Top;
        return obj;
    }

    public static T VerticalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Center;
        return obj;
    }

    public static T VerticalContentAlignmentBottom<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Bottom;
        return obj;
    }

    // TextWrappingProperty

    public static T TextWrapping<T>(this T obj, Avalonia.Media.TextWrapping value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextWrappingProperty] = value;
        return obj;
    }

    public static T TextWrapping<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextWrappingProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TextWrapping<T>(this T obj, IObservable<Avalonia.Media.TextWrapping> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextWrappingProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTextWrapping(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.TextWrappingProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.TextWrapping> ObserveTextWrapping(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.TextWrappingProperty);
    }

    public static T OnTextWrapping<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<Avalonia.Media.TextWrapping>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.TextWrappingProperty);
        handler(obj, observable);
        return obj;
    }

    public static T TextWrappingNoWrap<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextWrappingProperty] = Avalonia.Media.TextWrapping.NoWrap;
        return obj;
    }

    public static T TextWrappingWrap<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextWrappingProperty] = Avalonia.Media.TextWrapping.Wrap;
        return obj;
    }

    public static T TextWrappingWrapWithOverflow<T>(this T obj) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextWrappingProperty] = Avalonia.Media.TextWrapping.WrapWithOverflow;
        return obj;
    }

    // WatermarkProperty

    public static T Watermark<T>(this T obj, System.String value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.WatermarkProperty] = value;
        return obj;
    }

    public static T Watermark<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.WatermarkProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Watermark<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.WatermarkProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindWatermark(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.WatermarkProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveWatermark(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.WatermarkProperty);
    }

    public static T OnWatermark<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.String>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.WatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    // UseFloatingWatermarkProperty

    public static T UseFloatingWatermark<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UseFloatingWatermarkProperty] = value;
        return obj;
    }

    public static T UseFloatingWatermark<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UseFloatingWatermarkProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T UseFloatingWatermark<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UseFloatingWatermarkProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindUseFloatingWatermark(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.UseFloatingWatermarkProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveUseFloatingWatermark(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.UseFloatingWatermarkProperty);
    }

    public static T OnUseFloatingWatermark<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.UseFloatingWatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    // NewLineProperty

    public static T NewLine<T>(this T obj, System.String value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.NewLineProperty] = value;
        return obj;
    }

    public static T NewLine<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.NewLineProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T NewLine<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.NewLineProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindNewLine(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.NewLineProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveNewLine(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.NewLineProperty);
    }

    public static T OnNewLine<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.String>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.NewLineProperty);
        handler(obj, observable);
        return obj;
    }

    // InnerLeftContentProperty

    public static T InnerLeftContent<T>(this T obj, System.Object value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerLeftContentProperty] = value;
        return obj;
    }

    public static T InnerLeftContent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerLeftContentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T InnerLeftContent<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerLeftContentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindInnerLeftContent(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.InnerLeftContentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveInnerLeftContent(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.InnerLeftContentProperty);
    }

    public static T OnInnerLeftContent<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Object>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.InnerLeftContentProperty);
        handler(obj, observable);
        return obj;
    }

    // InnerRightContentProperty

    public static T InnerRightContent<T>(this T obj, System.Object value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerRightContentProperty] = value;
        return obj;
    }

    public static T InnerRightContent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerRightContentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T InnerRightContent<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerRightContentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindInnerRightContent(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.InnerRightContentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveInnerRightContent(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.InnerRightContentProperty);
    }

    public static T OnInnerRightContent<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Object>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.InnerRightContentProperty);
        handler(obj, observable);
        return obj;
    }

    // RevealPasswordProperty

    public static T RevealPassword<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.RevealPasswordProperty] = value;
        return obj;
    }

    public static T RevealPassword<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.RevealPasswordProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T RevealPassword<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.RevealPasswordProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRevealPassword(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.RevealPasswordProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveRevealPassword(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.RevealPasswordProperty);
    }

    public static T OnRevealPassword<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.RevealPasswordProperty);
        handler(obj, observable);
        return obj;
    }

    // CanCutProperty

    public static Avalonia.Data.IBinding BindCanCut(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.TextBox.CanCutProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanCut(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CanCutProperty);
    }

    public static Avalonia.Controls.TextBox OnCanCut(this Avalonia.Controls.TextBox obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.CanCutProperty);
        handler(obj, observable);
        return obj;
    }

    // CanCopyProperty

    public static Avalonia.Data.IBinding BindCanCopy(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.TextBox.CanCopyProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanCopy(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CanCopyProperty);
    }

    public static Avalonia.Controls.TextBox OnCanCopy(this Avalonia.Controls.TextBox obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.CanCopyProperty);
        handler(obj, observable);
        return obj;
    }

    // CanPasteProperty

    public static Avalonia.Data.IBinding BindCanPaste(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.TextBox.CanPasteProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanPaste(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CanPasteProperty);
    }

    public static Avalonia.Controls.TextBox OnCanPaste(this Avalonia.Controls.TextBox obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.CanPasteProperty);
        handler(obj, observable);
        return obj;
    }

    // IsUndoEnabledProperty

    public static T IsUndoEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsUndoEnabledProperty] = value;
        return obj;
    }

    public static T IsUndoEnabled<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsUndoEnabledProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsUndoEnabled<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsUndoEnabledProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsUndoEnabled(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.IsUndoEnabledProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsUndoEnabled(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.IsUndoEnabledProperty);
    }

    public static T OnIsUndoEnabled<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.IsUndoEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    // UndoLimitProperty

    public static T UndoLimit<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UndoLimitProperty] = value;
        return obj;
    }

    public static T UndoLimit<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UndoLimitProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T UndoLimit<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UndoLimitProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindUndoLimit(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.UndoLimitProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveUndoLimit(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.UndoLimitProperty);
    }

    public static T OnUndoLimit<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Int32>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.UndoLimitProperty);
        handler(obj, observable);
        return obj;
    }

    // PasswordCharProperty

    // public static T PasswordChar<T>(this T obj, System.Char value) where T : Avalonia.Controls.TextBox
    // {
    //     obj[Avalonia.Controls.TextBox.PasswordCharProperty] = value;
    //     return obj;
    // }
    //
    // public static T PasswordChar<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    // {
    //     obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)] = binding;
    //     return obj;
    // }
    //
    // public static T PasswordChar<T>(this T obj, IObservable<System.Char> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    // {
    //     obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)] = observable.ToBinding();
    //     return obj;
    // }
    //
    // public static Avalonia.Data.IBinding BindPasswordChar(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    // {
    //     return obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)];
    // }
    //
    // public static IObservable<System.Char> ObservePasswordChar(this Avalonia.Controls.TextBox obj)
    // {
    //     return obj.GetObservable(Avalonia.Controls.TextBox.PasswordCharProperty);
    // }
    //
    // public static T OnPasswordChar<T>(this T obj, Action<Avalonia.Controls.TextBox, IObservable<System.Char>> handler) where T : Avalonia.Controls.TextBox
    // {
    //     var observable = obj.GetObservable(Avalonia.Controls.TextBox.PasswordCharProperty);
    //     handler(obj, observable);
    //     return obj;
    // }

    // CopyingToClipboardEvent

    public static T OnCopyingToClipboardHandler<T>(this T obj, Action<T, Avalonia.Interactivity.RoutedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TextBox
    {
        obj.AddHandler(Avalonia.Controls.TextBox.CopyingToClipboardEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnCopyingToClipboard<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.CopyingToClipboardEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnCopyingToClipboard(this Avalonia.Controls.TextBox obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CopyingToClipboardEvent, routes);
    }

    // CuttingToClipboardEvent

    public static T OnCuttingToClipboardHandler<T>(this T obj, Action<T, Avalonia.Interactivity.RoutedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TextBox
    {
        obj.AddHandler(Avalonia.Controls.TextBox.CuttingToClipboardEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnCuttingToClipboard<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.CuttingToClipboardEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnCuttingToClipboard(this Avalonia.Controls.TextBox obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CuttingToClipboardEvent, routes);
    }

    // PastingFromClipboardEvent

    public static T OnPastingFromClipboardHandler<T>(this T obj, Action<T, Avalonia.Interactivity.RoutedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TextBox
    {
        obj.AddHandler(Avalonia.Controls.TextBox.PastingFromClipboardEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnPastingFromClipboard<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TextBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.TextBox.PastingFromClipboardEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnPastingFromClipboard(this Avalonia.Controls.TextBox obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.PastingFromClipboardEvent, routes);
    }

    // CopyingToClipboard

    public static T OnCopyingToClipboardEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.CopyingToClipboard += h, 
                h => obj.CopyingToClipboard -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnCopyingToClipboardEvent(this Avalonia.Controls.TextBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.CopyingToClipboard += h, 
                h => obj.CopyingToClipboard -= h)
            .Select(x => x.EventArgs);
    }

    // CuttingToClipboard

    public static T OnCuttingToClipboardEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.CuttingToClipboard += h, 
                h => obj.CuttingToClipboard -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnCuttingToClipboardEvent(this Avalonia.Controls.TextBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.CuttingToClipboard += h, 
                h => obj.CuttingToClipboard -= h)
            .Select(x => x.EventArgs);
    }

    // PastingFromClipboard

    public static T OnPastingFromClipboardEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Controls.TextBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.PastingFromClipboard += h, 
                h => obj.PastingFromClipboard -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnPastingFromClipboardEvent(this Avalonia.Controls.TextBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.PastingFromClipboard += h, 
                h => obj.PastingFromClipboard -= h)
            .Select(x => x.EventArgs);
    }
}
