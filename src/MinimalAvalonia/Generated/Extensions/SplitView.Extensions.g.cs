// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class SplitViewExtensions
{
    // CompactPaneLengthProperty

    public static T CompactPaneLength<T>(this T obj, System.Double value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.CompactPaneLengthProperty] = value;
        return obj;
    }

    public static T CompactPaneLength<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.CompactPaneLengthProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CompactPaneLength<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.CompactPaneLengthProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCompactPaneLength(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.CompactPaneLengthProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveCompactPaneLength(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.CompactPaneLengthProperty);
    }

    public static T OnCompactPaneLength<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Double>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.CompactPaneLengthProperty);
        handler(obj, observable);
        return obj;
    }

    // DisplayModeProperty

    public static T DisplayMode<T>(this T obj, Avalonia.Controls.SplitViewDisplayMode value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = value;
        return obj;
    }

    public static T DisplayMode<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T DisplayMode<T>(this T obj, IObservable<Avalonia.Controls.SplitViewDisplayMode> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindDisplayMode(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.DisplayModeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.SplitViewDisplayMode> ObserveDisplayMode(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.DisplayModeProperty);
    }

    public static T OnDisplayMode<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Controls.SplitViewDisplayMode>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.DisplayModeProperty);
        handler(obj, observable);
        return obj;
    }

    public static T DisplayModeInline<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = Avalonia.Controls.SplitViewDisplayMode.Inline;
        return obj;
    }

    public static T DisplayModeCompactInline<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = Avalonia.Controls.SplitViewDisplayMode.CompactInline;
        return obj;
    }

    public static T DisplayModeOverlay<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = Avalonia.Controls.SplitViewDisplayMode.Overlay;
        return obj;
    }

    public static T DisplayModeCompactOverlay<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = Avalonia.Controls.SplitViewDisplayMode.CompactOverlay;
        return obj;
    }

    // IsPaneOpenProperty

    public static T IsPaneOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.IsPaneOpenProperty] = value;
        return obj;
    }

    public static T IsPaneOpen<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.IsPaneOpenProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsPaneOpen<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.IsPaneOpenProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsPaneOpen(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.IsPaneOpenProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsPaneOpen(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.IsPaneOpenProperty);
    }

    public static T OnIsPaneOpen<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.IsPaneOpenProperty);
        handler(obj, observable);
        return obj;
    }

    // OpenPaneLengthProperty

    public static T OpenPaneLength<T>(this T obj, System.Double value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.OpenPaneLengthProperty] = value;
        return obj;
    }

    public static T OpenPaneLength<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.OpenPaneLengthProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T OpenPaneLength<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.OpenPaneLengthProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOpenPaneLength(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.OpenPaneLengthProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveOpenPaneLength(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.OpenPaneLengthProperty);
    }

    public static T OnOpenPaneLength<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Double>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.OpenPaneLengthProperty);
        handler(obj, observable);
        return obj;
    }

    // PaneBackgroundProperty

    public static T PaneBackground<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneBackgroundProperty] = value;
        return obj;
    }

    public static T PaneBackground<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneBackgroundProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PaneBackground<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneBackgroundProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPaneBackground(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.PaneBackgroundProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObservePaneBackground(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneBackgroundProperty);
    }

    public static T OnPaneBackground<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneBackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    // PanePlacementProperty

    public static T PanePlacement<T>(this T obj, Avalonia.Controls.SplitViewPanePlacement value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PanePlacementProperty] = value;
        return obj;
    }

    public static T PanePlacement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PanePlacementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PanePlacement<T>(this T obj, IObservable<Avalonia.Controls.SplitViewPanePlacement> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PanePlacementProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPanePlacement(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.PanePlacementProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.SplitViewPanePlacement> ObservePanePlacement(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PanePlacementProperty);
    }

    public static T OnPanePlacement<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Controls.SplitViewPanePlacement>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PanePlacementProperty);
        handler(obj, observable);
        return obj;
    }

    public static T PanePlacementLeft<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PanePlacementProperty] = Avalonia.Controls.SplitViewPanePlacement.Left;
        return obj;
    }

    public static T PanePlacementRight<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PanePlacementProperty] = Avalonia.Controls.SplitViewPanePlacement.Right;
        return obj;
    }

    // PaneProperty

    public static T Pane<T>(this T obj, System.Object value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneProperty] = value;
        return obj;
    }

    public static T Pane<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Pane<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPane(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.PaneProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObservePane(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneProperty);
    }

    public static T OnPane<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Object>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneProperty);
        handler(obj, observable);
        return obj;
    }

    // UseLightDismissOverlayModeProperty

    public static T UseLightDismissOverlayMode<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty] = value;
        return obj;
    }

    public static T UseLightDismissOverlayMode<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T UseLightDismissOverlayMode<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindUseLightDismissOverlayMode(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveUseLightDismissOverlayMode(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty);
    }

    public static T OnUseLightDismissOverlayMode<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty);
        handler(obj, observable);
        return obj;
    }

    // TemplateSettingsProperty

    public static T TemplateSettings<T>(this T obj, Avalonia.Controls.SplitViewTemplateSettings value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.TemplateSettingsProperty] = value;
        return obj;
    }

    public static T TemplateSettings<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.TemplateSettingsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TemplateSettings<T>(this T obj, IObservable<Avalonia.Controls.SplitViewTemplateSettings> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.TemplateSettingsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTemplateSettings(this Avalonia.Controls.SplitView obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.SplitView.TemplateSettingsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.SplitViewTemplateSettings> ObserveTemplateSettings(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.TemplateSettingsProperty);
    }

    public static T OnTemplateSettings<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Controls.SplitViewTemplateSettings>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.TemplateSettingsProperty);
        handler(obj, observable);
        return obj;
    }
}
