// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ScrollContentPresenterExtensions
{
    // CanHorizontallyScrollProperty

    public static T CanHorizontallyScroll<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty] = value;
        return obj;
    }

    public static T CanHorizontallyScroll<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CanHorizontallyScroll<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCanHorizontallyScroll(this Avalonia.Controls.Presenters.ScrollContentPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanHorizontallyScroll(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty);
    }

    public static T OnCanHorizontallyScroll<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // CanVerticallyScrollProperty

    public static T CanVerticallyScroll<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty] = value;
        return obj;
    }

    public static T CanVerticallyScroll<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CanVerticallyScroll<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCanVerticallyScroll(this Avalonia.Controls.Presenters.ScrollContentPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanVerticallyScroll(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty);
    }

    public static T OnCanVerticallyScroll<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // ExtentProperty

    public static T Extent<T>(this T obj, Avalonia.Size value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty] = value;
        return obj;
    }

    public static T Extent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Extent<T>(this T obj, IObservable<Avalonia.Size> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindExtent(this Avalonia.Controls.Presenters.ScrollContentPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Size> ObserveExtent(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty);
    }

    public static T OnExtent<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<Avalonia.Size>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty);
        handler(obj, observable);
        return obj;
    }

    // OffsetProperty

    public static T Offset<T>(this T obj, Avalonia.Vector value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty] = value;
        return obj;
    }

    public static T Offset<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Offset<T>(this T obj, IObservable<Avalonia.Vector> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOffset(this Avalonia.Controls.Presenters.ScrollContentPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Vector> ObserveOffset(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty);
    }

    public static T OnOffset<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<Avalonia.Vector>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // ViewportProperty

    public static T Viewport<T>(this T obj, Avalonia.Size value) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty] = value;
        return obj;
    }

    public static T Viewport<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Viewport<T>(this T obj, IObservable<Avalonia.Size> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindViewport(this Avalonia.Controls.Presenters.ScrollContentPresenter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Size> ObserveViewport(this Avalonia.Controls.Presenters.ScrollContentPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty);
    }

    public static T OnViewport<T>(this T obj, Action<Avalonia.Controls.Presenters.ScrollContentPresenter, IObservable<Avalonia.Size>> handler) where T : Avalonia.Controls.Presenters.ScrollContentPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty);
        handler(obj, observable);
        return obj;
    }
}
