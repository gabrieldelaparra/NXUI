// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class BrushExtensions
{
    // OpacityProperty

    public static T Opacity<T>(this T obj, System.Double value) where T : Avalonia.Media.Brush
    {
        obj[Avalonia.Media.Brush.OpacityProperty] = value;
        return obj;
    }

    public static T Opacity<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.Brush
    {
        obj[Avalonia.Media.Brush.OpacityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Opacity<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.Brush
    {
        obj[Avalonia.Media.Brush.OpacityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOpacity(this Avalonia.Media.Brush obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.Brush.OpacityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveOpacity(this Avalonia.Media.Brush obj)
    {
        return obj.GetObservable(Avalonia.Media.Brush.OpacityProperty);
    }

    public static T OnOpacity<T>(this T obj, Action<Avalonia.Media.Brush, IObservable<System.Double>> handler) where T : Avalonia.Media.Brush
    {
        var observable = obj.GetObservable(Avalonia.Media.Brush.OpacityProperty);
        handler(obj, observable);
        return obj;
    }
}
