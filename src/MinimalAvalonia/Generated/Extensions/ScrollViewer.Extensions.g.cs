// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ScrollViewerExtensions
{
    // CanHorizontallyScrollProperty

    public static Avalonia.Data.IBinding BindCanHorizontallyScroll(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanHorizontallyScroll(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnCanHorizontallyScroll(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // CanVerticallyScrollProperty

    public static Avalonia.Data.IBinding BindCanVerticallyScroll(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanVerticallyScroll(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnCanVerticallyScroll(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // ExtentProperty

    public static T Extent<T>(this T obj, Avalonia.Size value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.ExtentProperty] = value;
        return obj;
    }

    public static T Extent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.ExtentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Extent<T>(this T obj, IObservable<Avalonia.Size> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.ExtentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindExtent(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.ExtentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Size> ObserveExtent(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.ExtentProperty);
    }

    public static T OnExtent<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Size>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.ExtentProperty);
        handler(obj, observable);
        return obj;
    }

    // OffsetProperty

    public static T Offset<T>(this T obj, Avalonia.Vector value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.OffsetProperty] = value;
        return obj;
    }

    public static T Offset<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.OffsetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Offset<T>(this T obj, IObservable<Avalonia.Vector> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.OffsetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOffset(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.OffsetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Vector> ObserveOffset(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.OffsetProperty);
    }

    public static T OnOffset<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Vector>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.OffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // ViewportProperty

    public static T Viewport<T>(this T obj, Avalonia.Size value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.ViewportProperty] = value;
        return obj;
    }

    public static T Viewport<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.ViewportProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Viewport<T>(this T obj, IObservable<Avalonia.Size> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.ViewportProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindViewport(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.ViewportProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Size> ObserveViewport(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.ViewportProperty);
    }

    public static T OnViewport<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Size>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.ViewportProperty);
        handler(obj, observable);
        return obj;
    }

    // LargeChangeProperty

    public static Avalonia.Data.IBinding BindLargeChange(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.LargeChangeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Size> ObserveLargeChange(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.LargeChangeProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnLargeChange(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Size>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.LargeChangeProperty);
        handler(obj, observable);
        return obj;
    }

    // SmallChangeProperty

    public static Avalonia.Data.IBinding BindSmallChange(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.SmallChangeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Size> ObserveSmallChange(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.SmallChangeProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnSmallChange(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<Avalonia.Size>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.SmallChangeProperty);
        handler(obj, observable);
        return obj;
    }

    // HorizontalScrollBarMaximumProperty

    public static Avalonia.Data.IBinding BindHorizontalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveHorizontalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnHorizontalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty);
        handler(obj, observable);
        return obj;
    }

    // HorizontalScrollBarValueProperty

    public static T HorizontalScrollBarValue<T>(this T obj, System.Double value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty] = value;
        return obj;
    }

    public static T HorizontalScrollBarValue<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T HorizontalScrollBarValue<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHorizontalScrollBarValue(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveHorizontalScrollBarValue(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty);
    }

    public static T OnHorizontalScrollBarValue<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty);
        handler(obj, observable);
        return obj;
    }

    // HorizontalScrollBarViewportSizeProperty

    public static Avalonia.Data.IBinding BindHorizontalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveHorizontalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnHorizontalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty);
        handler(obj, observable);
        return obj;
    }

    // HorizontalScrollBarVisibilityProperty

    public static T HorizontalScrollBarVisibility<T>(this T obj, Avalonia.Controls.Primitives.ScrollBarVisibility value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = value;
        return obj;
    }

    public static T HorizontalScrollBarVisibility<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T HorizontalScrollBarVisibility<T>(this T obj, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHorizontalScrollBarVisibility(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> ObserveHorizontalScrollBarVisibility(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty);
    }

    public static T OnHorizontalScrollBarVisibility<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty);
        handler(obj, observable);
        return obj;
    }

    public static T HorizontalScrollBarVisibilityDisabled<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        return obj;
    }

    public static T HorizontalScrollBarVisibilityAuto<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        return obj;
    }

    public static T HorizontalScrollBarVisibilityHidden<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        return obj;
    }

    public static T HorizontalScrollBarVisibilityVisible<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        return obj;
    }

    // VerticalScrollBarMaximumProperty

    public static Avalonia.Data.IBinding BindVerticalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveVerticalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnVerticalScrollBarMaximum(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty);
        handler(obj, observable);
        return obj;
    }

    // VerticalScrollBarValueProperty

    public static T VerticalScrollBarValue<T>(this T obj, System.Double value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty] = value;
        return obj;
    }

    public static T VerticalScrollBarValue<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T VerticalScrollBarValue<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindVerticalScrollBarValue(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveVerticalScrollBarValue(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty);
    }

    public static T OnVerticalScrollBarValue<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty);
        handler(obj, observable);
        return obj;
    }

    // VerticalScrollBarViewportSizeProperty

    public static Avalonia.Data.IBinding BindVerticalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveVerticalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnVerticalScrollBarViewportSize(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty);
        handler(obj, observable);
        return obj;
    }

    // VerticalScrollBarVisibilityProperty

    public static T VerticalScrollBarVisibility<T>(this T obj, Avalonia.Controls.Primitives.ScrollBarVisibility value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = value;
        return obj;
    }

    public static T VerticalScrollBarVisibility<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T VerticalScrollBarVisibility<T>(this T obj, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindVerticalScrollBarVisibility(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> ObserveVerticalScrollBarVisibility(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty);
    }

    public static T OnVerticalScrollBarVisibility<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty);
        handler(obj, observable);
        return obj;
    }

    public static T VerticalScrollBarVisibilityDisabled<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        return obj;
    }

    public static T VerticalScrollBarVisibilityAuto<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        return obj;
    }

    public static T VerticalScrollBarVisibilityHidden<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        return obj;
    }

    public static T VerticalScrollBarVisibilityVisible<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        return obj;
    }

    // IsExpandedProperty

    public static Avalonia.Data.IBinding BindIsExpanded(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.IsExpandedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsExpanded(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.IsExpandedProperty);
    }

    public static Avalonia.Controls.ScrollViewer OnIsExpanded(this Avalonia.Controls.ScrollViewer obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.IsExpandedProperty);
        handler(obj, observable);
        return obj;
    }

    // AllowAutoHideProperty

    public static T AllowAutoHide<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.AllowAutoHideProperty] = value;
        return obj;
    }

    public static T AllowAutoHide<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.AllowAutoHideProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AllowAutoHide<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ScrollViewer
    {
        obj[Avalonia.Controls.ScrollViewer.AllowAutoHideProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAllowAutoHide(this Avalonia.Controls.ScrollViewer obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ScrollViewer.AllowAutoHideProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveAllowAutoHide(this Avalonia.Controls.ScrollViewer obj)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.AllowAutoHideProperty);
    }

    public static T OnAllowAutoHide<T>(this T obj, Action<Avalonia.Controls.ScrollViewer, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.AllowAutoHideProperty);
        handler(obj, observable);
        return obj;
    }

    // ScrollChangedEvent

    public static T OnScrollChangedHandler<T>(this T obj, Action<T, Avalonia.Controls.ScrollChangedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.ScrollViewer
    {
        obj.AddHandler(Avalonia.Controls.ScrollViewer.ScrollChangedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnScrollChanged<T>(this T obj, Action<T, IObservable<Avalonia.Controls.ScrollChangedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = obj.GetObservable(Avalonia.Controls.ScrollViewer.ScrollChangedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.ScrollChangedEventArgs> ObserveOnScrollChanged(this Avalonia.Controls.ScrollViewer obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.ScrollViewer.ScrollChangedEvent, routes);
    }

    // ScrollChanged

    public static T OnScrollChangedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.ScrollChangedEventArgs>> handler) where T : Avalonia.Controls.ScrollViewer
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.ScrollChangedEventArgs>, Avalonia.Controls.ScrollChangedEventArgs>(
                h => obj.ScrollChanged += h, 
                h => obj.ScrollChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.ScrollChangedEventArgs> ObserveOnScrollChangedEvent(this Avalonia.Controls.ScrollViewer obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.ScrollChangedEventArgs>, Avalonia.Controls.ScrollChangedEventArgs>(
                h => obj.ScrollChanged += h, 
                h => obj.ScrollChanged -= h)
            .Select(x => x.EventArgs);
    }
}
