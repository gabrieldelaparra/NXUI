// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class PopupExtensions
{
    // ChildProperty

    public static T Child<T>(this T obj, Avalonia.Controls.Control value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.ChildProperty] = value;
        return obj;
    }

    public static T Child<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.ChildProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Child<T>(this T obj, IObservable<Avalonia.Controls.Control> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.ChildProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindChild(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.ChildProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Control> ObserveChild(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.ChildProperty);
    }

    public static T OnChild<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<Avalonia.Controls.Control>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.ChildProperty);
        handler(obj, observable);
        return obj;
    }

    // IsOpenProperty

    public static T IsOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.IsOpenProperty] = value;
        return obj;
    }

    public static T IsOpen<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.IsOpenProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsOpen<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.IsOpenProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsOpen(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.IsOpenProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsOpen(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.IsOpenProperty);
    }

    public static T OnIsOpen<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.IsOpenProperty);
        handler(obj, observable);
        return obj;
    }

    // PlacementAnchorProperty

    public static T PlacementAnchor<T>(this T obj, Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = value;
        return obj;
    }

    public static T PlacementAnchor<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlacementAnchor<T>(this T obj, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlacementAnchor(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor> ObservePlacementAnchor(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty);
    }

    public static T OnPlacementAnchor<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty);
        handler(obj, observable);
        return obj;
    }

    public static T PlacementAnchorNone<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.None;
        return obj;
    }

    public static T PlacementAnchorTop<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Top;
        return obj;
    }

    public static T PlacementAnchorBottom<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Bottom;
        return obj;
    }

    public static T PlacementAnchorVerticalMask<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.VerticalMask;
        return obj;
    }

    public static T PlacementAnchorLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Left;
        return obj;
    }

    public static T PlacementAnchorTopLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.TopLeft;
        return obj;
    }

    public static T PlacementAnchorBottomLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.BottomLeft;
        return obj;
    }

    public static T PlacementAnchorRight<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Right;
        return obj;
    }

    public static T PlacementAnchorTopRight<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.TopRight;
        return obj;
    }

    public static T PlacementAnchorBottomRight<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.BottomRight;
        return obj;
    }

    public static T PlacementAnchorHorizontalMask<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.HorizontalMask;
        return obj;
    }

    public static T PlacementAnchorAllMask<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.AllMask;
        return obj;
    }

    // PlacementConstraintAdjustmentProperty

    public static T PlacementConstraintAdjustment<T>(this T obj, Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = value;
        return obj;
    }

    public static T PlacementConstraintAdjustment<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlacementConstraintAdjustment<T>(this T obj, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlacementConstraintAdjustment(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment> ObservePlacementConstraintAdjustment(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty);
    }

    public static T OnPlacementConstraintAdjustment<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static T PlacementConstraintAdjustmentNone<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.None;
        return obj;
    }

    public static T PlacementConstraintAdjustmentSlideX<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.SlideX;
        return obj;
    }

    public static T PlacementConstraintAdjustmentSlideY<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.SlideY;
        return obj;
    }

    public static T PlacementConstraintAdjustmentFlipX<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.FlipX;
        return obj;
    }

    public static T PlacementConstraintAdjustmentFlipY<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.FlipY;
        return obj;
    }

    public static T PlacementConstraintAdjustmentResizeX<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.ResizeX;
        return obj;
    }

    public static T PlacementConstraintAdjustmentResizeY<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.ResizeY;
        return obj;
    }

    public static T PlacementConstraintAdjustmentAll<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.All;
        return obj;
    }

    // PlacementGravityProperty

    public static T PlacementGravity<T>(this T obj, Avalonia.Controls.Primitives.PopupPositioning.PopupGravity value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = value;
        return obj;
    }

    public static T PlacementGravity<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlacementGravity<T>(this T obj, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlacementGravity(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity> ObservePlacementGravity(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementGravityProperty);
    }

    public static T OnPlacementGravity<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementGravityProperty);
        handler(obj, observable);
        return obj;
    }

    public static T PlacementGravityNone<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.None;
        return obj;
    }

    public static T PlacementGravityTop<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Top;
        return obj;
    }

    public static T PlacementGravityBottom<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Bottom;
        return obj;
    }

    public static T PlacementGravityLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Left;
        return obj;
    }

    public static T PlacementGravityTopLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.TopLeft;
        return obj;
    }

    public static T PlacementGravityBottomLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.BottomLeft;
        return obj;
    }

    public static T PlacementGravityRight<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Right;
        return obj;
    }

    public static T PlacementGravityTopRight<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.TopRight;
        return obj;
    }

    public static T PlacementGravityBottomRight<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.BottomRight;
        return obj;
    }

    // PlacementModeProperty

    public static T PlacementMode<T>(this T obj, Avalonia.Controls.PlacementMode value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty] = value;
        return obj;
    }

    public static T PlacementMode<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlacementMode<T>(this T obj, IObservable<Avalonia.Controls.PlacementMode> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlacementMode(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.PlacementMode> ObservePlacementMode(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementModeProperty);
    }

    public static T OnPlacementMode<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<Avalonia.Controls.PlacementMode>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementModeProperty);
        handler(obj, observable);
        return obj;
    }

    public static T PlacementModePointer<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty] = Avalonia.Controls.PlacementMode.Pointer;
        return obj;
    }

    public static T PlacementModeBottom<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty] = Avalonia.Controls.PlacementMode.Bottom;
        return obj;
    }

    public static T PlacementModeRight<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty] = Avalonia.Controls.PlacementMode.Right;
        return obj;
    }

    public static T PlacementModeLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty] = Avalonia.Controls.PlacementMode.Left;
        return obj;
    }

    public static T PlacementModeTop<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty] = Avalonia.Controls.PlacementMode.Top;
        return obj;
    }

    public static T PlacementModeAnchorAndGravity<T>(this T obj) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementModeProperty] = Avalonia.Controls.PlacementMode.AnchorAndGravity;
        return obj;
    }

    // PlacementRectProperty

    public static T PlacementRect<T>(this T obj, System.Nullable<Avalonia.Rect> value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementRectProperty] = value;
        return obj;
    }

    public static T PlacementRect<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementRectProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlacementRect<T>(this T obj, IObservable<System.Nullable<Avalonia.Rect>> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementRectProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlacementRect(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.PlacementRectProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Nullable<Avalonia.Rect>> ObservePlacementRect(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementRectProperty);
    }

    public static T OnPlacementRect<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Nullable<Avalonia.Rect>>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementRectProperty);
        handler(obj, observable);
        return obj;
    }

    // PlacementTargetProperty

    public static T PlacementTarget<T>(this T obj, Avalonia.Controls.Control value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementTargetProperty] = value;
        return obj;
    }

    public static T PlacementTarget<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementTargetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlacementTarget<T>(this T obj, IObservable<Avalonia.Controls.Control> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.PlacementTargetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlacementTarget(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.PlacementTargetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Control> ObservePlacementTarget(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementTargetProperty);
    }

    public static T OnPlacementTarget<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<Avalonia.Controls.Control>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementTargetProperty);
        handler(obj, observable);
        return obj;
    }

    // ObeyScreenEdgesProperty

    public static T ObeyScreenEdges<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.ObeyScreenEdgesProperty] = value;
        return obj;
    }

    public static T ObeyScreenEdges<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.ObeyScreenEdgesProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ObeyScreenEdges<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.ObeyScreenEdgesProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindObeyScreenEdges(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.ObeyScreenEdgesProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveObeyScreenEdges(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.ObeyScreenEdgesProperty);
    }

    public static T OnObeyScreenEdges<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.ObeyScreenEdgesProperty);
        handler(obj, observable);
        return obj;
    }

    // OverlayDismissEventPassThroughProperty

    public static T OverlayDismissEventPassThrough<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.OverlayDismissEventPassThroughProperty] = value;
        return obj;
    }

    public static T OverlayDismissEventPassThrough<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.OverlayDismissEventPassThroughProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T OverlayDismissEventPassThrough<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.OverlayDismissEventPassThroughProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOverlayDismissEventPassThrough(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.OverlayDismissEventPassThroughProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveOverlayDismissEventPassThrough(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.OverlayDismissEventPassThroughProperty);
    }

    public static T OnOverlayDismissEventPassThrough<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.OverlayDismissEventPassThroughProperty);
        handler(obj, observable);
        return obj;
    }

    // OverlayInputPassThroughElementProperty

    public static T OverlayInputPassThroughElement<T>(this T obj, Avalonia.Input.IInputElement value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.OverlayInputPassThroughElementProperty] = value;
        return obj;
    }

    public static T OverlayInputPassThroughElement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.OverlayInputPassThroughElementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T OverlayInputPassThroughElement<T>(this T obj, IObservable<Avalonia.Input.IInputElement> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.OverlayInputPassThroughElementProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOverlayInputPassThroughElement(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.OverlayInputPassThroughElementProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Input.IInputElement> ObserveOverlayInputPassThroughElement(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.OverlayInputPassThroughElementProperty);
    }

    public static T OnOverlayInputPassThroughElement<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<Avalonia.Input.IInputElement>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.OverlayInputPassThroughElementProperty);
        handler(obj, observable);
        return obj;
    }

    // HorizontalOffsetProperty

    public static T HorizontalOffset<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty] = value;
        return obj;
    }

    public static T HorizontalOffset<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T HorizontalOffset<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHorizontalOffset(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveHorizontalOffset(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty);
    }

    public static T OnHorizontalOffset<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // IsLightDismissEnabledProperty

    public static T IsLightDismissEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.IsLightDismissEnabledProperty] = value;
        return obj;
    }

    public static T IsLightDismissEnabled<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.IsLightDismissEnabledProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsLightDismissEnabled<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.IsLightDismissEnabledProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsLightDismissEnabled(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.IsLightDismissEnabledProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsLightDismissEnabled(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.IsLightDismissEnabledProperty);
    }

    public static T OnIsLightDismissEnabled<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.IsLightDismissEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    // VerticalOffsetProperty

    public static T VerticalOffset<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty] = value;
        return obj;
    }

    public static T VerticalOffset<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T VerticalOffset<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindVerticalOffset(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveVerticalOffset(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty);
    }

    public static T OnVerticalOffset<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // TopmostProperty

    public static T Topmost<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.TopmostProperty] = value;
        return obj;
    }

    public static T Topmost<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.TopmostProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Topmost<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    {
        obj[Avalonia.Controls.Primitives.Popup.TopmostProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTopmost(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Popup.TopmostProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveTopmost(this Avalonia.Controls.Primitives.Popup obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Popup.TopmostProperty);
    }

    public static T OnTopmost<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.Popup
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.TopmostProperty);
        handler(obj, observable);
        return obj;
    }

    // PlacementRectProperty

    // public static T PlacementRect<T>(this T obj, System.Nullable<Avalonia.Rect> value) where T : Avalonia.Controls.Primitives.Popup
    // {
    //     obj[Avalonia.Controls.Primitives.Popup.PlacementRectProperty] = value;
    //     return obj;
    // }
    //
    // public static T PlacementRect<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    // {
    //     obj[Avalonia.Controls.Primitives.Popup.PlacementRectProperty.Bind().WithMode(mode)] = binding;
    //     return obj;
    // }
    //
    // public static T PlacementRect<T>(this T obj, IObservable<System.Nullable<Avalonia.Rect>> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Popup
    // {
    //     obj[Avalonia.Controls.Primitives.Popup.PlacementRectProperty.Bind().WithMode(mode)] = observable.ToBinding();
    //     return obj;
    // }
    //
    // public static Avalonia.Data.IBinding BindPlacementRect(this Avalonia.Controls.Primitives.Popup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    // {
    //     return obj[Avalonia.Controls.Primitives.Popup.PlacementRectProperty.Bind().WithMode(mode)];
    // }
    //
    // public static IObservable<System.Nullable<Avalonia.Rect>> ObservePlacementRect(this Avalonia.Controls.Primitives.Popup obj)
    // {
    //     return obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementRectProperty);
    // }
    //
    // public static T OnPlacementRect<T>(this T obj, Action<Avalonia.Controls.Primitives.Popup, IObservable<System.Nullable<Avalonia.Rect>>> handler) where T : Avalonia.Controls.Primitives.Popup
    // {
    //     var observable = obj.GetObservable(Avalonia.Controls.Primitives.Popup.PlacementRectProperty);
    //     handler(obj, observable);
    //     return obj;
    // }
}
