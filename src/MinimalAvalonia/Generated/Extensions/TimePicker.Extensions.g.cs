// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TimePickerExtensions
{
    // MinuteIncrementProperty

    public static T MinuteIncrement<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.MinuteIncrementProperty] = value;
        return obj;
    }

    public static T MinuteIncrement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.MinuteIncrementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MinuteIncrement<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.MinuteIncrementProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMinuteIncrement(this Avalonia.Controls.TimePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TimePicker.MinuteIncrementProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveMinuteIncrement(this Avalonia.Controls.TimePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.TimePicker.MinuteIncrementProperty);
    }

    public static T OnMinuteIncrement<T>(this T obj, Action<Avalonia.Controls.TimePicker, IObservable<System.Int32>> handler) where T : Avalonia.Controls.TimePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.TimePicker.MinuteIncrementProperty);
        handler(obj, observable);
        return obj;
    }

    // ClockIdentifierProperty

    public static T ClockIdentifier<T>(this T obj, System.String value) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.ClockIdentifierProperty] = value;
        return obj;
    }

    public static T ClockIdentifier<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.ClockIdentifierProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ClockIdentifier<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.ClockIdentifierProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindClockIdentifier(this Avalonia.Controls.TimePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TimePicker.ClockIdentifierProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveClockIdentifier(this Avalonia.Controls.TimePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.TimePicker.ClockIdentifierProperty);
    }

    public static T OnClockIdentifier<T>(this T obj, Action<Avalonia.Controls.TimePicker, IObservable<System.String>> handler) where T : Avalonia.Controls.TimePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.TimePicker.ClockIdentifierProperty);
        handler(obj, observable);
        return obj;
    }

    // SelectedTimeProperty

    public static T SelectedTime<T>(this T obj, System.Nullable<System.TimeSpan> value) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.SelectedTimeProperty] = value;
        return obj;
    }

    public static T SelectedTime<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.SelectedTimeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectedTime<T>(this T obj, IObservable<System.Nullable<System.TimeSpan>> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TimePicker
    {
        obj[Avalonia.Controls.TimePicker.SelectedTimeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectedTime(this Avalonia.Controls.TimePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TimePicker.SelectedTimeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Nullable<System.TimeSpan>> ObserveSelectedTime(this Avalonia.Controls.TimePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.TimePicker.SelectedTimeProperty);
    }

    public static T OnSelectedTime<T>(this T obj, Action<Avalonia.Controls.TimePicker, IObservable<System.Nullable<System.TimeSpan>>> handler) where T : Avalonia.Controls.TimePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.TimePicker.SelectedTimeProperty);
        handler(obj, observable);
        return obj;
    }
}
